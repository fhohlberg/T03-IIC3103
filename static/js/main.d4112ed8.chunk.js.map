{"version":3,"sources":["components/AllStockRow.jsx","components/MarketTrendArrow.jsx","components/AllStocksList.jsx","components/StockRow.jsx","components/StocksList.jsx","components/ExchangeRow.jsx","components/ExchangeList.jsx","chartConfig.js","components/StocksGraph.jsx","components/StocksLoaderStatus.jsx","components/Dashboard.jsx","components/UnsafeScriptsWarning.jsx","App.js","index.js"],"names":["StockRow","react_default","a","createElement","this","props","stock_data","company_name","stock_name","toUpperCase","country","quote_base","React","Component","MarketTrendArrow","getArrow","_this","current_trend","className","title","StocksList","id","Object","keys","all_stocks","map","index","current_stock","AllStockRow","key","toggleStockSelection","getStockValueColor","stock","current_value","history","slice","value","is_selected","onClick","bind","volumen_buy","volumen_sell","min","max","toFixed","change","build","data","color","lib_default","date","time","dist","render","_ref","online","areStocksLoaded","components_MarketTrendArrow","market_trend","stocks","components_StockRow","colSpan","ExchangeRow","exchange_name","exchange_data","listed_companies","length","participacion","ExchangeList","exchanges","current_exchange","components_ExchangeRow","chartJsConfig","responsive","scales","xAxes","type","distribution","ticks","source","displayFormats","second","unit","scaleLabel","display","labelString","yAxes","beginAtZero","stepValue","steps","pan","enabled","mode","zoom","drag","chartColors","chartDataset","stock_values","label","fill","lineTension","backgroundColor","borderColor","borderCapStyle","borderJoinStyle","pointBorderColor","pointBackgroundColor","pointBorderWidth","pointHoverRadius","pointHoverBackgroundColor","pointHoverBorderColor","pointHoverBorderWidth","pointRadius","pointHitRadius","StocksGraph","updateChart","chart","refs","chartInstance","datasets","update","chart_dataset","find","dataset","getStockValues","concat","splice","indexOf","componentDidUpdate","t","Date","y","resetZoom","es","options","ref","StocksLoaderStatus","connectionError","Dashboard","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","saveNewStockValues","event","hideSpinner","result","up_values_count","down_values_count","new_stocks","state","ticker","Number","push","setState","newMarketTrend","saveNewBuyValues","new_exchange","volume","saveNewExchangeVolume","saveNewSellValues","volumen_total","hasOwnProperty","saveNewExchangeValues","name","saveAllStockValues","up_count","down_count","undefined","isToggleOn","isToggleStocks","handleClick2","assertThisInitialized","_this2","socket","socketIOClient","path","emit","on","style","textAlign","components_ExchangeList","components_StocksList","components_StocksGraph","showSpinner","components_StocksLoaderStatus","AllStocksList","UnsafeScriptsWarning","App","hasError","handleClick","error","info","console","log","components_UnsafeScriptsWarning","components_Dashboard","ReactDOM","src_App_0","document","getElementById"],"mappings":"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","file":"static/js/main.d4112ed8.chunk.js","sourcesContent":["import React from 'react'\nimport { Sparklines, SparklinesLine } from 'react-sparklines';\nimport TimeAgo from 'react-timeago'\n\nclass StockRow extends React.Component {\n  render() {\n    return (\n      <tr>\n        <td>\n          {this.props.stock_data.company_name}\n        </td>\n        <td>{this.props.stock_name.toUpperCase()}</td>\n        <td>{this.props.stock_data.country}</td>\n        <td>\n          {this.props.stock_data.quote_base}\n        </td>\n      </tr>\n    );\n  }\n}\n\nexport default StockRow;\n","import React from 'react'\n\nclass MarketTrendArrow extends React.Component {\n\n  getArrow = () => {\n    if(this.props.current_trend === 'up'){\n      return <span className='up-arrow'>&#8679;</span>\n    }\n    else if(this.props.current_trend === 'down'){\n      return <span className='down-arrow'>&#8681;</span>\n    }\n    else{\n      return '-';\n    }\n  }\n\n  render() {\n    return (\n      <span title='Market trend' className={\"icon market-trend\"}>\n        {this.getArrow()}\n      </span>\n    );\n  }\n}\n\nexport default MarketTrendArrow;","import React from 'react'\nimport AllStockRow from './AllStockRow.jsx'\nimport MarketTrendArrow from './MarketTrendArrow.jsx'\n\nconst StocksList = (props) => {\n  return (\n    <div className='card column' id='stocks_list'>\n      <div className='card-header'>\n        <div className='card-header-title'>\n          Información Stocks\n        </div>\n      </div>\n      <div className='card-content'>\n        <br></br>\n        <table className='table is-bordered'>\n          <thead>\n            <tr>\n              <th>Nombre Empresa</th>\n              <th>Thicker</th>\n              <th>País Origen</th>\n              <th>Moneda</th>\n            </tr>\n          </thead>\n          <tbody>\n            {Object.keys(props.all_stocks).map((stock_name, index) =>\n              {\n                let current_stock = props.all_stocks[stock_name];\n                return (\n                  <AllStockRow\n                    key={index} stock_name={stock_name}\n                    stock_data={current_stock}\n                    toggleStockSelection={props.toggleStockSelection}\n                  />\n                )\n              }\n            )}\n          </tbody>\n        </table>\n       </div>\n    </div>\n  );\n}\n\nexport default StocksList;\n","import React from 'react'\nimport { Sparklines, SparklinesLine } from 'react-sparklines';\nimport TimeAgo from 'react-timeago'\n\nclass StockRow extends React.Component {\n\n  getStockValueColor = (stock) =>{\n    if(stock.current_value < stock.history.slice(-2)[0].value){\n      return 'red';\n    }\n    else if(stock.current_value > stock.history.slice(-2)[0].value){\n      return 'green';\n    }\n    else{\n      return null;\n    }\n  }\n\n  render() {\n    let history = this.props.stock_data.history;\n    return (\n      <tr className={ this.props.stock_data.is_selected ? 'selected' : null } id={this.props.stock_name} onClick={this.props.toggleStockSelection.bind(this, this.props.stock_name)} >\n        <td>{this.props.stock_name.toUpperCase()}</td>\n        <td>\n          {this.props.stock_data.volumen_buy + this.props.stock_data.volumen_sell}\n        </td>\n        <td>\n          {this.props.stock_data.min}\n        </td>\n        <td>\n          {this.props.stock_data.max}\n        </td>\n        <td className={this.getStockValueColor(this.props.stock_data)}>\n          {this.props.stock_data.current_value.toFixed(2)}\n        </td>\n        <td className={this.getStockValueColor(this.props.stock_data)}>\n          {this.props.stock_data.change.toFixed(2)}\n        </td>\n\n        <td>\n          <Sparklines data={history.map((history) => { return history.value})}>\n            <SparklinesLine color=\"blue\" />\n          </Sparklines>\n        </td>\n        <td className='updated_at'>\n          <TimeAgo date={ history.slice(-1)[0].time } />\n        </td>\n      </tr>\n    );\n  }\n}\n\nexport default StockRow;\n","import React from 'react'\nimport { Detector } from \"react-detect-offline\";\nimport StockRow from './StockRow.jsx'\nimport MarketTrendArrow from './MarketTrendArrow.jsx'\n\nconst StocksList = (props) => {\n  return (\n    <div className='card column' id='stocks_list'>\n      <div className='card-header'>\n        <div className='card-header-title'>\n          Stocks\n          &nbsp;\n          <Detector\n            render={({ online }) => (\n              <span className={online ? \"tag is-success\" : \"tag is-danger\"}>\n                {online ? \"Live\" : \"Offline\"}\n              </span>\n            )}\n          />\n          &nbsp;\n        </div>\n      </div>\n      <div className='card-content'>\n        { props.areStocksLoaded() ? <p className='is-size-7 has-text-info'>Seleccione una o varios stocks para mostrar.</p> : null }\n        <br></br>\n        <table className='table is-bordered'>\n          <thead>\n            <tr>\n              <th>Thicker</th>\n              <th>Volumen</th>\n              <th>Bajo Histórico</th>\n              <th>Alto Histórico</th>\n              <th>\n                Último Valor\n                <MarketTrendArrow current_trend={props.market_trend} />\n              </th>\n              <th>% Variación</th>\n              <th>Historial</th>\n              <th>Tiempo</th>\n            </tr>\n          </thead>\n          <tbody>\n            {Object.keys(props.stocks).map((stock_name, index) =>\n              {\n                let current_stock = props.stocks[stock_name];\n                return (\n                  <StockRow\n                    key={index} stock_name={stock_name}\n                    stock_data={current_stock}\n                    toggleStockSelection={props.toggleStockSelection}\n                  />\n                )\n              }\n            )}\n            { props.areStocksLoaded() ? null : <tr><td colSpan='4'>No hay stocks todavía!</td></tr> }\n          </tbody>\n        </table>\n       </div>\n    </div>\n  );\n}\n\nexport default StocksList;\n","import React from 'react'\n\nclass ExchangeRow extends React.Component {\n\n  render() {\n    return (\n      <tr >\n        <td>{this.props.exchange_name.toUpperCase()}</td>\n        <td>\n          {this.props.exchange_data.volumen_buy}\n        </td>\n        <td>\n          {this.props.exchange_data.volumen_sell}\n        </td>\n        <td>\n          {this.props.exchange_data.volumen_sell + this.props.exchange_data.volumen_buy}\n        </td>\n        <td >\n          {this.props.exchange_data.listed_companies.length}\n        </td>\n        <td >\n          {this.props.exchange_data.participacion.toFixed(2)}\n        </td>\n      </tr>\n    );\n  }\n}\n\nexport default ExchangeRow;\n","import React from 'react'\nimport { Detector } from \"react-detect-offline\";\nimport ExchangeRow from './ExchangeRow.jsx'\n\nconst ExchangeList = (props) => {\n  return (\n    <div className='card column' id='exchange_list'>\n      <div className='card-header'>\n        <div className='card-header-title'>\n          Exchanges\n          &nbsp;\n          <Detector\n            render={({ online }) => (\n              <span className={online ? \"tag is-success\" : \"tag is-danger\"}>\n                {online ? \"Live\" : \"Offline\"}\n              </span>\n            )}\n          />\n          &nbsp;\n        </div>\n      </div>\n      <div className='card-content'>\n        <table className='table is-bordered'>\n          <thead>\n            <tr>\n              <th>Thicker</th>\n              <th>Volumen Compra</th>\n              <th>Volumen Venta</th>\n              <th>Volumen Total</th>\n              <th>Cantidad Acciones</th>\n              <th>% Participación mercado</th>\n            </tr>\n          </thead>\n          <tbody>\n            {Object.keys(props.exchanges).map((exchange_name, index) =>\n              {\n                let current_exchange = props.exchanges[exchange_name];\n                return (\n                  <ExchangeRow\n                    key={index} exchange_name={exchange_name}\n                    exchange_data={current_exchange}\n                  />\n                )\n              }\n            )}\n          </tbody>\n        </table>\n       </div>\n    </div>\n  );\n}\n\nexport default ExchangeList;\n","// configurations required for ChartJs\n\nexport const chartJsConfig = {\n  responsive: true,\n  scales: {\n    xAxes: [{\n      type: 'time',\n      distribution: 'linear',\n      ticks: {\n        source: 'auto'\n      },\n      time: {\n        displayFormats: {second: 'h:mm:ss a'},\n        unit: 'second'\n      },\n      scaleLabel: {\n        display: true,\n        labelString: 'Tiempo'\n      }\n    }],\n    yAxes: [{\n      ticks: {\n        beginAtZero: true,\n        stepValue: 10,\n        steps: 10\n      },\n      scaleLabel: {\n        display: true,\n        labelString: 'Precio (USD$)'\n      }\n    }]\n  },\n  pan: {\n    enabled: true,\n    mode: 'x'\n  },\n  zoom: {\n    enabled: true,\n    drag: false,\n    mode: 'x'\n  }\n};\n\n// keep enough colors (should be as many as the number of stocks recieved)\n// adding these manually to make sure the colors actually look good\nexport const chartColors = [\"rgb(244, 67, 54)\", \"rgb(76, 175, 80)\", \"rgb(63, 81, 181)\", \"rgb(255, 152, 0)\", \"rgb(33, 150, 243)\", \"rgb(139, 195, 74)\", \"rgb(255, 87, 34)\", \"rgb(121, 85, 72)\", \"rgb(233, 30, 99)\", \"rgb(205, 220, 57)\", \"rgb(156, 39, 176)\", \"rgb(255, 235, 59)\", \"rgb(158, 158, 158)\", \"rgb(103, 58, 183)\", \"rgb(0, 150, 136)\", \"rgb(255, 193, 7)\", \"rgb(96, 125, 139)\", \"rgb(33, 33, 33)\", \"rgb(169, 4, 4)\", \"rgb(1, 74, 64)\", \"rgb(179, 3, 72)\", \"rgb(84, 58, 68)\"];\n\nexport const chartDataset = (stock_name, color, stock_values) => {\n  return {\n    label: stock_name.toUpperCase(),\n    fill: false,\n    lineTension: 0,\n    backgroundColor: color,\n    borderColor: color,\n    borderCapStyle: 'butt',\n    borderJoinStyle: 'miter',\n    pointBorderColor: color,\n    pointBackgroundColor: '#fff',\n    pointBorderWidth: 1,\n    pointHoverRadius: 5,\n    pointHoverBackgroundColor: color,\n    pointHoverBorderColor: color,\n    pointHoverBorderWidth: 2,\n    pointRadius: 3,\n    pointHitRadius: 10,\n    data: stock_values\n  };\n};\n","import React from 'react'\nimport {Line} from 'react-chartjs-2';\nimport { chartJsConfig, chartColors, chartDataset } from '../chartConfig.js'\n\nclass StocksGraph extends React.Component {\n\n  // too big a function?\n  updateChart = () => {\n    let chart = this.refs.chart.chartInstance;\n\n    if(Object.keys(this.props.stocks).length === 0)\n    {\n      chart.data.datasets = [];\n      return chart.update();\n    }\n\n    Object.keys(this.props.stocks).map((stock_name, index) =>\n    {\n      let current_stock = this.props.stocks[stock_name];\n      let chart_dataset = chart.data.datasets.find((dataset) => {\n        return dataset.label === stock_name.toUpperCase()\n      });\n\n      if(current_stock.is_selected)\n      {\n        let current_stock = this.props.stocks[stock_name];\n        if(chart_dataset)\n        {\n          // only update the data, don't create a new dataset for the graph\n          chart_dataset.data = this.getStockValues(current_stock);\n        }\n        else\n        {\n          // create a new dataset for graph\n          if(current_stock)\n          {\n            chart.data.datasets = chart.data.datasets.concat(\n              [\n                chartDataset(stock_name, chartColors[index], this.getStockValues(current_stock))\n              ]\n            )\n          }\n        }\n      }\n      else\n      {\n        if(chart_dataset)\n        {\n          // remove the dataset from graph\n          chart.data.datasets.splice(chart.data.datasets.indexOf(chart_dataset), 1);\n        }\n      }\n      chart.update();\n    })\n  }\n\n  componentDidUpdate = () => {\n    this.updateChart();\n  }\n\n  // returns an array of objects, {t: timestamp, y: value}\n  getStockValues = (stock) =>{\n    return stock.history.map((history) => {\n      return {t: new Date(history.time), y: history.value};\n    })\n  }\n\n  resetZoom = () => {\n    this.refs.chart.chartInstance.resetZoom();\n  }\n\n  render() {\n    return (\n      <div className={'card column'} >\n        <div className='card-header'>\n          <div className='card-header-title'>\n            Gráfico Precio vs. Tiempo\n          </div>\n        </div>\n        <div className='card-content'>\n          <p className='is-size-7 has-text-info'>\n            {\n              this.refs.chart &&\n              this.refs.chart.chartInstance.data.datasets.length > 0 ? '' : 'Seleccione alguna stock para mostrar en el gráfico.'\n            }\n            <br></br>\n          </p>\n          <button className=\"button is-small is-pulled-right\" onClick={this.resetZoom}>Resetear Zoom</button>\n          <Line\n            data={{datasets: []}}\n            options={chartJsConfig}\n            ref='chart'\n          />\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default StocksGraph;\n","import React from 'react'\n\nconst StocksLoaderStatus = props => {\n  if(props.connectionError) {\n    return (\n      <div className='is-medium'>\n        <span className='has-text-danger' >No se han recibido datos. </span>\n        <br />(Vuelva después? :-))\n      </div>\n    );\n  } else {\n    return (\n      <div className='tag is-large is-success'>\n        <span className='loader'> &nbsp;</span>\n        &nbsp; &nbsp; Cargando stocks..\n      </div>\n    );\n  }\n}\n\nexport default StocksLoaderStatus;\n","import React from 'react'\nimport * as bulma from \"reactbulma\";\nimport StocksList from \"./StocksList.jsx\";\nimport AllStocksList from \"./AllStocksList.jsx\";\nimport ExchangeList from \"./ExchangeList.jsx\";\nimport StocksGraph from \"./StocksGraph.jsx\";\nimport StocksLoaderStatus from \"./StocksLoaderStatus.jsx\";\nimport socketIOClient from \"socket.io-client\";\n\nconst stocksUrl = 'wss://le-18262636.bitzonte.com';\n\nclass Dashboard extends React.Component {\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      all_stocks:{},\n      stocks: {},\n      exchanges: {},\n      market_trend: undefined, // 'up' or 'down'\n      connectionError: false,\n      isToggleOn: true,\n      isToggleStocks: true\n    };\n    this.handleClick2 = this.handleClick2.bind(this);\n  }\n\n  componentDidMount(){\n    this.props.hideSpinner();\n    const socket = socketIOClient(stocksUrl, {path: \"/stocks\"});\n\n    socket.emit(\"STOCKS\", (data) => {});\n    socket.on(\"STOCKS\", (data) => {\n      this.saveAllStockValues(data);\n    });\n    //socket.on(\"STOCKS\", (data) => {console.log(data);})\n\n    socket.on(\"UPDATE\", data => this.saveNewStockValues(data));\n\n    socket.on(\"BUY\", data => this.saveNewBuyValues(data));\n\n    socket.on(\"SELL\", data => this.saveNewSellValues(data));\n\n    socket.emit(\"EXCHANGES\", (data) => {});\n    socket.on(\"EXCHANGES\", (data) => {\n      this.saveNewExchangeValues(data)\n    });\n  }\n\n  saveNewStockValues = (event) => {\n    this.props.hideSpinner();\n    let result = event;\n    let [up_values_count, down_values_count] = [0, 0];\n\n    // time stored in histories should be consisitent across stocks(better for graphs)\n    let new_stocks = this.state.stocks\n\n    if(this.state.stocks[result.ticker])\n    {\n      new_stocks[result.ticker].current_value > Number(result.value) ? up_values_count++ : down_values_count++;\n      new_stocks[result.ticker].change = ((Number(result.value) - new_stocks[result.ticker].current_value) / new_stocks[result.ticker].current_value ) * 100\n      new_stocks[result.ticker].current_value = Number(result.value)\n      new_stocks[result.ticker].history.push({time: result.time, value: Number(result.value)})\n\n      if(new_stocks[result.ticker].min > Number(result.value) || new_stocks[result.ticker].min == null)\n      {\n        new_stocks[result.ticker].min = Number(result.value)\n      }\n      if(new_stocks[result.ticker].max < Number(result.value))\n      {\n        new_stocks[result.ticker].max = Number(result.value)\n      }\n    }\n    else\n    {\n      new_stocks[result.ticker] = { current_value: result.value, volumen_buy:0, volumen_sell:0, history: [{time: result.time, value: Number(result.value)}], min: Number(result.value), max: Number(result.value), change: 0,is_selected: false }\n    }\n    this.setState({stocks: new_stocks, market_trend: this.newMarketTrend(up_values_count, down_values_count)})\n  }\n\n\n  saveNewBuyValues = (event) => {\n    this.props.hideSpinner();\n    let result = event;\n\n    let new_stocks = this.state.stocks\n    let new_exchange = this.state.exchanges\n    if(this.state.stocks[result.ticker])\n    {\n      new_stocks[result.ticker].volumen_buy += result.volume;\n\n      for (var key in this.state.exchanges) {\n        if(this.state.exchanges[key].listed_companies.indexOf(this.state.all_stocks[result.ticker].company_name) > -1 ){\n          new_exchange[key].volumen_buy += result.volume\n        }\n      }\n    }\n    this.setState({stocks: new_stocks, exchanges: new_exchange})\n    this.saveNewExchangeVolume();\n  }\n\n  saveNewSellValues = (event) => {\n    this.props.hideSpinner();\n    let result = event;\n\n    let new_stocks = this.state.stocks\n    let new_exchange = this.state.exchanges\n    if(this.state.stocks[result.ticker])\n    {\n      new_stocks[result.ticker].volumen_sell += result.volume;\n\n      for (var key in this.state.exchanges) {\n        if(this.state.exchanges[key].listed_companies.indexOf(this.state.all_stocks[result.ticker].company_name) > -1 ){\n          new_exchange[key].volumen_sell += result.volume\n        }\n      }\n    }\n    this.setState({stocks: new_stocks, exchanges: new_exchange})\n    this.saveNewExchangeVolume();\n  }\n\n  saveNewExchangeVolume = () => {\n    let new_exchange = this.state.exchanges\n    let volumen_total = 0;\n\n    for (var key in this.state.exchanges) {\n      if (new_exchange.hasOwnProperty(key)) {\n        volumen_total += new_exchange[key].volumen_sell +  new_exchange[key].volumen_buy;\n      }\n    }\n\n    for (var key in this.state.exchanges) {\n      if (new_exchange.hasOwnProperty(key)) {\n        new_exchange[key].participacion = ((new_exchange[key].volumen_sell +  new_exchange[key].volumen_buy)  / volumen_total) * 100;\n        //console.log(new_exchange[key].participacion);\n      }\n    }\n    this.setState({exchanges: new_exchange})\n  }\n\n  saveNewExchangeValues = (event) => {\n    let result = event;\n    //console.log(result);\n\n    let new_exchange = this.state.exchanges\n\n    for (var key in result) {\n      if (new_exchange.hasOwnProperty(key)) {\n        //console.log(new_exchange[key].participacion);\n      }\n      else\n      {\n        new_exchange[key] = { name: result[key].name, listed_companies: result[key].listed_companies, volumen_sell: 0, volumen_buy: 0, participacion: 0}\n        //console.log(new_exchange[key]);\n      }\n    }\n\n    this.setState({exchanges: new_exchange})\n  }\n\n\n  saveAllStockValues = (event) => {\n    let result = event;\n\n    //console.log(result);\n    let new_stocks = this.state.all_stocks\n    result.map((stock) =>\n    {\n      new_stocks[stock.ticker] = {company_name: stock.company_name, quote_base: stock.quote_base, country: stock.country}\n    });\n    this.setState({all_stocks: new_stocks})\n  }\n\n  newMarketTrend = (up_count, down_count) => {\n    if(up_count === down_count) return undefined;\n    return up_count > down_count ? 'up' : 'down'\n  }\n\n  toggleStockSelection = (stock_name) => {\n    let new_stocks = this.state.stocks;\n    new_stocks[stock_name].is_selected = !new_stocks[stock_name].is_selected\n    this.setState({ stocks: new_stocks })\n  }\n\n\n  areStocksLoaded = () => {\n    return Object.keys(this.state.stocks).length > 0;\n  }\n\n  handleClick2() {\n  this.setState(state => ({\n    isToggleStocks: !state.isToggleStocks\n    }));\n  }\n\n  render() {\n    if (!this.state.isToggleStocks) {\n      return(\n        <div className='container' style={{ textAlign: \"center\" }}>\n          <h5> El socket sigue conectado... </h5>\n          <br></br>\n          <AllStocksList\n            hideSpinner={this.hideSpinner}\n            showSpinner={this.state.showSpinner}\n            all_stocks={this.state.all_stocks}\n           />\n           <br></br>\n           <button className= \"btn-theme02\" onClick={this.handleClick2}>\n             {this.state.isToggleStocks ? 'INFORMACIÓN STOCKS' : 'VOLVER'}\n           </button>\n        </div>\n      );\n    }\n    else{\n      return (\n        <div className='container' style={{ textAlign: \"center\" }}>\n          <div className='container'>\n          <br></br>\n            <div className='rows'>\n                <ExchangeList\n                  exchanges={this.state.exchanges}\n                />\n                <br></br>\n                <button className= \"btn-theme02\" onClick={this.handleClick2}>\n                  {this.state.isToggleStocks ? 'INFORMACIÓN STOCKS' : 'VOLVER'}\n                </button>\n                <br></br>\n                <br></br>\n                <StocksList\n                  stocks={this.state.stocks}\n                  toggleStockSelection={this.toggleStockSelection}\n                  market_trend={this.state.market_trend}\n                  areStocksLoaded={this.areStocksLoaded}\n                />\n                <br></br>\n                <StocksGraph stocks={this.state.stocks} />\n              </div>\n              <div className={ this.props.showSpinner ? 'modal is-active' : 'modal' }>\n                <div className=\"modal-background\"></div>\n                <div className=\"modal-content\">\n                  <StocksLoaderStatus connectionError={this.state.connectionError} />\n                </div>\n              </div>\n            </div>\n          </div>\n      );\n    }\n  }\n}\n\nexport default Dashboard;\n","import React from 'react'\n\nconst UnsafeScriptsWarning = props => {\n  return (\n    <div className='container stocks-loader'>\n      <div className='card-header'>\n        <div className='card-header-icon'>\n          <span className='loader'></span>\n        </div>\n        <div className='card-header-title'>\n          Loading...\n        </div>\n      </div>\n      <div className='card'>\n        <div className='card-content'>\n          Debes hacer click en &nbsp;<code>\"Load Unsafe Scripts\"</code>&nbsp; para proceder.\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default UnsafeScriptsWarning;\n","import React, { Component } from 'react';\nimport './App.css';\nimport AllStocksList from \"./components/AllStocksList.jsx\";\nimport Dashboard from './components/Dashboard.jsx'\nimport UnsafeScriptsWarning from \"./components/UnsafeScriptsWarning\";\n\nclass App extends Component {\n\n  constructor(){\n  super();\n  this.handleClick = this.handleClick.bind(this);\n  }\n\n  state = {\n    hasError: false,\n    showSpinner: true\n  }\n\n  static getDerivedStateFromError(error) {\n    console.log('Ocurrió algún error');\n    return { hasError: true };\n  }\n\n  componentDidCatch(error, info) {\n    console.log(error, info);\n  }\n\n  hideSpinner = () => {\n    this.setState({showSpinner: false});\n  }\n\n  handleClick() {\n  this.setState(state => ({\n    isToggleOn: !state.isToggleOn\n    }));\n  }\n\n  render() {\n    if (this.state.hasError) {\n      return <UnsafeScriptsWarning />;\n    }\n    if (!this.state.isToggleOn) {\n      return(\n        <div className='container' style={{ textAlign: \"center\" }}>\n          <br></br>\n          <div className='column'>\n            <button onClick={this.handleClick}>\n              {this.state.isToggleOn ? 'CONECTAR SOCKET' : 'DESCONECTAR SOCKET'}\n            </button>\n          </div>\n          <Dashboard hideSpinner={this.hideSpinner} showSpinner={this.state.showSpinner} />\n        </div>\n      );\n    }\n    else{\n      return (\n          <div className='container' style={{ textAlign: \"center\" }}>\n            <br></br>\n            <div className='container'>\n              <br></br>\n                <button onClick={this.handleClick}>\n                  {this.state.isToggleOn ? 'CONECTAR SOCKET' : 'DESCONECTAR SOCKET'}\n                </button>\n              <br></br>\n            </div>\n        </div>\n      );\n    }\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}