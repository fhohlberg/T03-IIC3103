{"ast":null,"code":"import _classCallCheck from \"/Users/francisca/iCloud Drive (archivo)/Documents/Documentos - MacBook Pro de Francisca/ING 9 SEMESTRE/Taller de Integracio\\u0301n/stocks-master-tarea3/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/francisca/iCloud Drive (archivo)/Documents/Documentos - MacBook Pro de Francisca/ING 9 SEMESTRE/Taller de Integracio\\u0301n/stocks-master-tarea3/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/francisca/iCloud Drive (archivo)/Documents/Documentos - MacBook Pro de Francisca/ING 9 SEMESTRE/Taller de Integracio\\u0301n/stocks-master-tarea3/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/francisca/iCloud Drive (archivo)/Documents/Documentos - MacBook Pro de Francisca/ING 9 SEMESTRE/Taller de Integracio\\u0301n/stocks-master-tarea3/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/francisca/iCloud Drive (archivo)/Documents/Documentos - MacBook Pro de Francisca/ING 9 SEMESTRE/Taller de Integracio\\u0301n/stocks-master-tarea3/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/francisca/iCloud Drive (archivo)/Documents/Documentos - MacBook Pro de Francisca/ING 9 SEMESTRE/Taller de Integracio\\u0301n/stocks-master-tarea3/src/components/Dashboard.jsx\";\nimport React from 'react';\nimport * as bulma from \"reactbulma\";\nimport StocksList from \"./StocksList.jsx\";\nimport StocksGraph from \"./StocksGraph.jsx\";\nimport StocksLoaderStatus from \"./StocksLoaderStatus.jsx\";\nimport socketIOClient from \"socket.io-client\";\nvar stocksUrl = 'wss://le-18262636.bitzonte.com';\n\nvar Dashboard =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(Dashboard, _React$Component);\n\n  function Dashboard() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, Dashboard);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(Dashboard)).call.apply(_getPrototypeOf2, [this].concat(args)));\n    _this.state = {\n      // stocks = {name: {current_value: 12, history: [{time: '2131', value: 45}, ...], is_selected: false}, ...}\n      stocks: {},\n      market_trend: undefined,\n      // 'up' or 'down'\n      connectionError: false,\n      response: false\n    };\n\n    _this.componentDidMount = function () {\n      var socket = socketIOClient(stocksUrl, {\n        path: \"/stocks\"\n      });\n      socket.on(\"UPDATE\", function (data) {\n        return _this.setState({\n          response: data\n        });\n      });\n      socket.on(\"UPDATE\", _this.saveNewStockValues);\n    };\n\n    _this.saveNewStockValues = function (event) {\n      _this.props.hideSpinner();\n\n      var response = _this.state.response;\n      var result = _this.state.response;\n      var up_values_count = 0,\n          down_values_count = 0; // time stored in histories should be consisitent across stocks(better for graphs)\n\n      var new_stocks = _this.state.stocks;\n\n      if (_this.state.stocks[result.ticker]) {\n        new_stocks[result.ticker].current_value > Number(result.value) ? up_values_count++ : down_values_count++;\n        new_stocks[result.ticker].change = (Number(result.value) - new_stocks[result.ticker].current_value) / new_stocks[result.ticker].current_value * 100;\n        new_stocks[result.ticker].current_value = Number(result.value);\n        new_stocks[result.ticker].history.push({\n          time: result.time,\n          value: Number(result.value)\n        });\n\n        if (new_stocks[result.ticker].min > Number(result.value) || new_stocks[result.ticker].min == null) {\n          new_stocks[result.ticker].min = Number(result.value);\n        }\n\n        if (new_stocks[result.ticker].max < Number(result.value)) {\n          new_stocks[result.ticker].max = Number(result.value);\n        }\n      } else {\n        new_stocks[result.ticker] = {\n          current_value: result.value,\n          history: [{\n            time: result.time,\n            value: Number(result.value)\n          }],\n          min: Number(result.value),\n          max: Number(result.value),\n          change: 0,\n          is_selected: false\n        };\n      }\n\n      _this.setState({\n        stocks: new_stocks,\n        market_trend: _this.newMarketTrend(up_values_count, down_values_count)\n      });\n    };\n\n    _this.newMarketTrend = function (up_count, down_count) {\n      if (up_count === down_count) return undefined;\n      return up_count > down_count ? 'up' : 'down';\n    };\n\n    _this.toggleStockSelection = function (stock_name) {\n      var new_stocks = _this.state.stocks;\n      new_stocks[stock_name].is_selected = !new_stocks[stock_name].is_selected;\n\n      _this.setState({\n        stocks: new_stocks\n      });\n    };\n\n    _this.resetData = function () {\n      var new_stocks = _this.state.stocks;\n      Object.keys(_this.state.stocks).map(function (stock_name, index) {\n        new_stocks[stock_name].history = [new_stocks[stock_name].history.pop()];\n        new_stocks[stock_name].min = null;\n        new_stocks[stock_name].max = null;\n      });\n\n      _this.setState({\n        stocks: new_stocks\n      });\n    };\n\n    _this.areStocksLoaded = function () {\n      return Object.keys(_this.state.stocks).length > 0;\n    };\n\n    return _this;\n  }\n\n  _createClass(Dashboard, [{\n    key: \"render\",\n    value: function render() {\n      return React.createElement(\"div\", {\n        className: \"container\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 89\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"columns\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 90\n        },\n        __self: this\n      }, React.createElement(StocksList, {\n        stocks: this.state.stocks,\n        toggleStockSelection: this.toggleStockSelection,\n        resetData: this.resetData,\n        market_trend: this.state.market_trend,\n        areStocksLoaded: this.areStocksLoaded,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 91\n        },\n        __self: this\n      }), React.createElement(StocksGraph, {\n        stocks: this.state.stocks,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 98\n        },\n        __self: this\n      })), React.createElement(\"div\", {\n        className: this.props.showSpinner ? 'modal is-active' : 'modal',\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 100\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"modal-background\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 101\n        },\n        __self: this\n      }), React.createElement(\"div\", {\n        className: \"modal-content\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 102\n        },\n        __self: this\n      }, React.createElement(StocksLoaderStatus, {\n        connectionError: this.state.connectionError,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 103\n        },\n        __self: this\n      }))));\n    }\n  }]);\n\n  return Dashboard;\n}(React.Component);\n\nexport default Dashboard;","map":{"version":3,"sources":["/Users/francisca/iCloud Drive (archivo)/Documents/Documentos - MacBook Pro de Francisca/ING 9 SEMESTRE/Taller de IntegracioÃÅn/stocks-master-tarea3/src/components/Dashboard.jsx"],"names":["React","bulma","StocksList","StocksGraph","StocksLoaderStatus","socketIOClient","stocksUrl","Dashboard","state","stocks","market_trend","undefined","connectionError","response","componentDidMount","socket","path","on","data","setState","saveNewStockValues","event","props","hideSpinner","result","up_values_count","down_values_count","new_stocks","ticker","current_value","Number","value","change","history","push","time","min","max","is_selected","newMarketTrend","up_count","down_count","toggleStockSelection","stock_name","resetData","Object","keys","map","index","pop","areStocksLoaded","length","showSpinner","Component"],"mappings":";;;;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAO,KAAKC,KAAZ,MAAuB,YAAvB;AACA,OAAOC,UAAP,MAAuB,kBAAvB;AACA,OAAOC,WAAP,MAAwB,mBAAxB;AACA,OAAOC,kBAAP,MAA+B,0BAA/B;AACA,OAAOC,cAAP,MAA2B,kBAA3B;AAEA,IAAMC,SAAS,GAAG,gCAAlB;;IAEMC,S;;;;;;;;;;;;;;;;;UAEJC,K,GAAQ;AACR;AACCC,MAAAA,MAAM,EAAE,EAFD;AAGPC,MAAAA,YAAY,EAAEC,SAHP;AAGkB;AACzBC,MAAAA,eAAe,EAAE,KAJV;AAKPC,MAAAA,QAAQ,EAAE;AALH,K;;UAQRC,iB,GAAoB,YAAM;AACxB,UAAMC,MAAM,GAAGV,cAAc,CAACC,SAAD,EAAY;AAACU,QAAAA,IAAI,EAAE;AAAP,OAAZ,CAA7B;AACAD,MAAAA,MAAM,CAACE,EAAP,CAAU,QAAV,EAAoB,UAAAC,IAAI;AAAA,eAAI,MAAKC,QAAL,CAAc;AAAEN,UAAAA,QAAQ,EAAEK;AAAZ,SAAd,CAAJ;AAAA,OAAxB;AACAH,MAAAA,MAAM,CAACE,EAAP,CAAU,QAAV,EAAoB,MAAKG,kBAAzB;AACD,K;;UAEDA,kB,GAAqB,UAACC,KAAD,EAAW;AAC9B,YAAKC,KAAL,CAAWC,WAAX;;AAD8B,UAEtBV,QAFsB,GAET,MAAKL,KAFI,CAEtBK,QAFsB;AAG9B,UAAIW,MAAM,GAAG,MAAKhB,KAAL,CAAWK,QAAxB;AAH8B,UAIzBY,eAJyB,GAIc,CAJd;AAAA,UAIRC,iBAJQ,GAIiB,CAJjB,EAM9B;;AACA,UAAIC,UAAU,GAAG,MAAKnB,KAAL,CAAWC,MAA5B;;AAEA,UAAG,MAAKD,KAAL,CAAWC,MAAX,CAAkBe,MAAM,CAACI,MAAzB,CAAH,EACA;AACED,QAAAA,UAAU,CAACH,MAAM,CAACI,MAAR,CAAV,CAA0BC,aAA1B,GAA0CC,MAAM,CAACN,MAAM,CAACO,KAAR,CAAhD,GAAiEN,eAAe,EAAhF,GAAqFC,iBAAiB,EAAtG;AACAC,QAAAA,UAAU,CAACH,MAAM,CAACI,MAAR,CAAV,CAA0BI,MAA1B,GAAoC,CAACF,MAAM,CAACN,MAAM,CAACO,KAAR,CAAN,GAAuBJ,UAAU,CAACH,MAAM,CAACI,MAAR,CAAV,CAA0BC,aAAlD,IAAmEF,UAAU,CAACH,MAAM,CAACI,MAAR,CAAV,CAA0BC,aAA9F,GAAgH,GAAnJ;AACAF,QAAAA,UAAU,CAACH,MAAM,CAACI,MAAR,CAAV,CAA0BC,aAA1B,GAA0CC,MAAM,CAACN,MAAM,CAACO,KAAR,CAAhD;AACAJ,QAAAA,UAAU,CAACH,MAAM,CAACI,MAAR,CAAV,CAA0BK,OAA1B,CAAkCC,IAAlC,CAAuC;AAACC,UAAAA,IAAI,EAAEX,MAAM,CAACW,IAAd;AAAoBJ,UAAAA,KAAK,EAAED,MAAM,CAACN,MAAM,CAACO,KAAR;AAAjC,SAAvC;;AAEA,YAAGJ,UAAU,CAACH,MAAM,CAACI,MAAR,CAAV,CAA0BQ,GAA1B,GAAgCN,MAAM,CAACN,MAAM,CAACO,KAAR,CAAtC,IAAwDJ,UAAU,CAACH,MAAM,CAACI,MAAR,CAAV,CAA0BQ,GAA1B,IAAiC,IAA5F,EACA;AACET,UAAAA,UAAU,CAACH,MAAM,CAACI,MAAR,CAAV,CAA0BQ,GAA1B,GAAgCN,MAAM,CAACN,MAAM,CAACO,KAAR,CAAtC;AACD;;AACD,YAAGJ,UAAU,CAACH,MAAM,CAACI,MAAR,CAAV,CAA0BS,GAA1B,GAAgCP,MAAM,CAACN,MAAM,CAACO,KAAR,CAAzC,EACA;AACEJ,UAAAA,UAAU,CAACH,MAAM,CAACI,MAAR,CAAV,CAA0BS,GAA1B,GAAgCP,MAAM,CAACN,MAAM,CAACO,KAAR,CAAtC;AACD;AAGF,OAjBD,MAmBA;AACEJ,QAAAA,UAAU,CAACH,MAAM,CAACI,MAAR,CAAV,GAA4B;AAAEC,UAAAA,aAAa,EAAEL,MAAM,CAACO,KAAxB;AAA+BE,UAAAA,OAAO,EAAE,CAAC;AAACE,YAAAA,IAAI,EAAEX,MAAM,CAACW,IAAd;AAAoBJ,YAAAA,KAAK,EAAED,MAAM,CAACN,MAAM,CAACO,KAAR;AAAjC,WAAD,CAAxC;AAA4FK,UAAAA,GAAG,EAAEN,MAAM,CAACN,MAAM,CAACO,KAAR,CAAvG;AAAuHM,UAAAA,GAAG,EAAEP,MAAM,CAACN,MAAM,CAACO,KAAR,CAAlI;AAAkJC,UAAAA,MAAM,EAAE,CAA1J;AAA4JM,UAAAA,WAAW,EAAE;AAAzK,SAA5B;AACD;;AACD,YAAKnB,QAAL,CAAc;AAACV,QAAAA,MAAM,EAAEkB,UAAT;AAAqBjB,QAAAA,YAAY,EAAE,MAAK6B,cAAL,CAAoBd,eAApB,EAAqCC,iBAArC;AAAnC,OAAd;AACD,K;;UAGDa,c,GAAiB,UAACC,QAAD,EAAWC,UAAX,EAA0B;AACzC,UAAGD,QAAQ,KAAKC,UAAhB,EAA4B,OAAO9B,SAAP;AAC5B,aAAO6B,QAAQ,GAAGC,UAAX,GAAwB,IAAxB,GAA+B,MAAtC;AACD,K;;UAEDC,oB,GAAuB,UAACC,UAAD,EAAgB;AACrC,UAAIhB,UAAU,GAAG,MAAKnB,KAAL,CAAWC,MAA5B;AACAkB,MAAAA,UAAU,CAACgB,UAAD,CAAV,CAAuBL,WAAvB,GAAqC,CAACX,UAAU,CAACgB,UAAD,CAAV,CAAuBL,WAA7D;;AACA,YAAKnB,QAAL,CAAc;AAAEV,QAAAA,MAAM,EAAEkB;AAAV,OAAd;AACD,K;;UAEDiB,S,GAAY,YAAM;AAChB,UAAIjB,UAAU,GAAG,MAAKnB,KAAL,CAAWC,MAA5B;AACAoC,MAAAA,MAAM,CAACC,IAAP,CAAY,MAAKtC,KAAL,CAAWC,MAAvB,EAA+BsC,GAA/B,CAAmC,UAACJ,UAAD,EAAaK,KAAb,EACnC;AACErB,QAAAA,UAAU,CAACgB,UAAD,CAAV,CAAuBV,OAAvB,GAAiC,CAACN,UAAU,CAACgB,UAAD,CAAV,CAAuBV,OAAvB,CAA+BgB,GAA/B,EAAD,CAAjC;AACAtB,QAAAA,UAAU,CAACgB,UAAD,CAAV,CAAuBP,GAAvB,GAA6B,IAA7B;AACAT,QAAAA,UAAU,CAACgB,UAAD,CAAV,CAAuBN,GAAvB,GAA6B,IAA7B;AACD,OALD;;AAMA,YAAKlB,QAAL,CAAc;AAAEV,QAAAA,MAAM,EAAEkB;AAAV,OAAd;AACD,K;;UAEDuB,e,GAAkB,YAAM;AACtB,aAAOL,MAAM,CAACC,IAAP,CAAY,MAAKtC,KAAL,CAAWC,MAAvB,EAA+B0C,MAA/B,GAAwC,CAA/C;AACD,K;;;;;;;6BAEQ;AACP,aACE;AAAK,QAAA,SAAS,EAAC,WAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE;AAAK,QAAA,SAAS,EAAC,SAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE,oBAAC,UAAD;AACE,QAAA,MAAM,EAAE,KAAK3C,KAAL,CAAWC,MADrB;AAEE,QAAA,oBAAoB,EAAE,KAAKiC,oBAF7B;AAGE,QAAA,SAAS,EAAE,KAAKE,SAHlB;AAIE,QAAA,YAAY,EAAE,KAAKpC,KAAL,CAAWE,YAJ3B;AAKE,QAAA,eAAe,EAAE,KAAKwC,eALxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADF,EAQE,oBAAC,WAAD;AAAa,QAAA,MAAM,EAAE,KAAK1C,KAAL,CAAWC,MAAhC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QARF,CADF,EAWE;AAAK,QAAA,SAAS,EAAG,KAAKa,KAAL,CAAW8B,WAAX,GAAyB,iBAAzB,GAA6C,OAA9D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE;AAAK,QAAA,SAAS,EAAC,kBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADF,EAEE;AAAK,QAAA,SAAS,EAAC,eAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE,oBAAC,kBAAD;AAAoB,QAAA,eAAe,EAAE,KAAK5C,KAAL,CAAWI,eAAhD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADF,CAFF,CAXF,CADF;AAoBD;;;;EAlGqBZ,KAAK,CAACqD,S;;AAqG9B,eAAe9C,SAAf","sourcesContent":["import React from 'react'\nimport * as bulma from \"reactbulma\";\nimport StocksList from \"./StocksList.jsx\";\nimport StocksGraph from \"./StocksGraph.jsx\";\nimport StocksLoaderStatus from \"./StocksLoaderStatus.jsx\";\nimport socketIOClient from \"socket.io-client\";\n\nconst stocksUrl = 'wss://le-18262636.bitzonte.com';\n\nclass Dashboard extends React.Component {\n\n  state = {\n  // stocks = {name: {current_value: 12, history: [{time: '2131', value: 45}, ...], is_selected: false}, ...}\n   stocks: {},\n   market_trend: undefined, // 'up' or 'down'\n   connectionError: false,\n   response: false\n  }\n\n  componentDidMount = () => {\n    const socket = socketIOClient(stocksUrl, {path: \"/stocks\"});\n    socket.on(\"UPDATE\", data => this.setState({ response: data }));\n    socket.on(\"UPDATE\", this.saveNewStockValues);\n  }\n\n  saveNewStockValues = (event) => {\n    this.props.hideSpinner();\n    const { response } = this.state;\n    let result = this.state.response;\n    let [up_values_count, down_values_count] = [0, 0];\n\n    // time stored in histories should be consisitent across stocks(better for graphs)\n    let new_stocks = this.state.stocks\n\n    if(this.state.stocks[result.ticker])\n    {\n      new_stocks[result.ticker].current_value > Number(result.value) ? up_values_count++ : down_values_count++;\n      new_stocks[result.ticker].change = ((Number(result.value) - new_stocks[result.ticker].current_value) / new_stocks[result.ticker].current_value ) * 100\n      new_stocks[result.ticker].current_value = Number(result.value)\n      new_stocks[result.ticker].history.push({time: result.time, value: Number(result.value)})\n\n      if(new_stocks[result.ticker].min > Number(result.value) || new_stocks[result.ticker].min == null)\n      {\n        new_stocks[result.ticker].min = Number(result.value)\n      }\n      if(new_stocks[result.ticker].max < Number(result.value))\n      {\n        new_stocks[result.ticker].max = Number(result.value)\n      }\n\n\n    }\n    else\n    {\n      new_stocks[result.ticker] = { current_value: result.value, history: [{time: result.time, value: Number(result.value)}], min: Number(result.value), max: Number(result.value), change: 0,is_selected: false }\n    }\n    this.setState({stocks: new_stocks, market_trend: this.newMarketTrend(up_values_count, down_values_count)})\n  }\n\n  // it's about the values that just came in, and not all the stocks\n  newMarketTrend = (up_count, down_count) => {\n    if(up_count === down_count) return undefined;\n    return up_count > down_count ? 'up' : 'down'\n  }\n\n  toggleStockSelection = (stock_name) => {\n    let new_stocks = this.state.stocks;\n    new_stocks[stock_name].is_selected = !new_stocks[stock_name].is_selected\n    this.setState({ stocks: new_stocks })\n  }\n\n  resetData = () => {\n    let new_stocks = this.state.stocks;\n    Object.keys(this.state.stocks).map((stock_name, index) =>\n    {\n      new_stocks[stock_name].history = [new_stocks[stock_name].history.pop()];\n      new_stocks[stock_name].min = null;\n      new_stocks[stock_name].max = null;\n    });\n    this.setState({ stocks: new_stocks });\n  }\n\n  areStocksLoaded = () => {\n    return Object.keys(this.state.stocks).length > 0;\n  }\n\n  render() {\n    return (\n      <div className='container'>\n        <div className='columns'>\n          <StocksList\n            stocks={this.state.stocks}\n            toggleStockSelection={this.toggleStockSelection}\n            resetData={this.resetData}\n            market_trend={this.state.market_trend}\n            areStocksLoaded={this.areStocksLoaded}\n          />\n          <StocksGraph stocks={this.state.stocks} />\n        </div>\n        <div className={ this.props.showSpinner ? 'modal is-active' : 'modal' }>\n          <div className=\"modal-background\"></div>\n          <div className=\"modal-content\">\n            <StocksLoaderStatus connectionError={this.state.connectionError} />\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default Dashboard;\n"]},"metadata":{},"sourceType":"module"}