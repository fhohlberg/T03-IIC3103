{"ast":null,"code":"import _classCallCheck from \"/Users/francisca/iCloud Drive (archivo)/Documents/Documentos - MacBook Pro de Francisca/ING 9 SEMESTRE/Taller de Integracio\\u0301n/stocks-master-tarea3/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/francisca/iCloud Drive (archivo)/Documents/Documentos - MacBook Pro de Francisca/ING 9 SEMESTRE/Taller de Integracio\\u0301n/stocks-master-tarea3/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/francisca/iCloud Drive (archivo)/Documents/Documentos - MacBook Pro de Francisca/ING 9 SEMESTRE/Taller de Integracio\\u0301n/stocks-master-tarea3/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/francisca/iCloud Drive (archivo)/Documents/Documentos - MacBook Pro de Francisca/ING 9 SEMESTRE/Taller de Integracio\\u0301n/stocks-master-tarea3/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/francisca/iCloud Drive (archivo)/Documents/Documentos - MacBook Pro de Francisca/ING 9 SEMESTRE/Taller de Integracio\\u0301n/stocks-master-tarea3/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _assertThisInitialized from \"/Users/francisca/iCloud Drive (archivo)/Documents/Documentos - MacBook Pro de Francisca/ING 9 SEMESTRE/Taller de Integracio\\u0301n/stocks-master-tarea3/node_modules/@babel/runtime/helpers/esm/assertThisInitialized\";\nvar _jsxFileName = \"/Users/francisca/iCloud Drive (archivo)/Documents/Documentos - MacBook Pro de Francisca/ING 9 SEMESTRE/Taller de Integracio\\u0301n/stocks-master-tarea3/src/components/Dashboard.jsx\";\nimport React from 'react';\nimport * as bulma from \"reactbulma\";\nimport StocksList from \"./StocksList.jsx\";\nimport ExchangeList from \"./ExchangeList.jsx\";\nimport StocksGraph from \"./StocksGraph.jsx\";\nimport StocksLoaderStatus from \"./StocksLoaderStatus.jsx\";\nimport socketIOClient from \"socket.io-client\";\nvar stocksUrl = 'wss://le-18262636.bitzonte.com';\n\nvar Dashboard =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(Dashboard, _React$Component);\n\n  function Dashboard(props) {\n    var _this;\n\n    _classCallCheck(this, Dashboard);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(Dashboard).call(this, props));\n\n    _this.saveNewStockValues = function (event) {\n      _this.props.hideSpinner();\n\n      var result = _this.state.response;\n      var up_values_count = 0,\n          down_values_count = 0; // time stored in histories should be consisitent across stocks(better for graphs)\n\n      var new_stocks = _this.state.stocks;\n\n      if (_this.state.stocks[result.ticker]) {\n        new_stocks[result.ticker].current_value > Number(result.value) ? up_values_count++ : down_values_count++;\n        new_stocks[result.ticker].change = (Number(result.value) - new_stocks[result.ticker].current_value) / new_stocks[result.ticker].current_value * 100;\n        new_stocks[result.ticker].current_value = Number(result.value);\n        new_stocks[result.ticker].history.push({\n          time: result.time,\n          value: Number(result.value)\n        });\n\n        if (new_stocks[result.ticker].min > Number(result.value) || new_stocks[result.ticker].min == null) {\n          new_stocks[result.ticker].min = Number(result.value);\n        }\n\n        if (new_stocks[result.ticker].max < Number(result.value)) {\n          new_stocks[result.ticker].max = Number(result.value);\n        }\n      } else {\n        new_stocks[result.ticker] = {\n          current_value: result.value,\n          volumen_buy: 0,\n          volumen_sell: 0,\n          history: [{\n            time: result.time,\n            value: Number(result.value)\n          }],\n          min: Number(result.value),\n          max: Number(result.value),\n          change: 0,\n          is_selected: false\n        };\n      }\n\n      _this.setState({\n        stocks: new_stocks,\n        market_trend: _this.newMarketTrend(up_values_count, down_values_count)\n      });\n    };\n\n    _this.saveNewBuyValues = function (event) {\n      _this.props.hideSpinner();\n\n      var result = _this.state.response1;\n      var new_stocks = _this.state.stocks;\n\n      if (_this.state.stocks[result.ticker]) {\n        new_stocks[result.ticker].volumen_buy += result.volume;\n      }\n\n      _this.setState({\n        stocks: new_stocks\n      });\n    };\n\n    _this.saveNewSellValues = function (event) {\n      _this.props.hideSpinner();\n\n      var result = _this.state.response2;\n      var new_stocks = _this.state.stocks;\n\n      if (_this.state.stocks[result.ticker]) {\n        new_stocks[result.ticker].volumen_sell += result.volume;\n      }\n\n      _this.setState({\n        stocks: new_stocks\n      });\n    };\n\n    _this.saveNewExchangeValues = function (event) {\n      _this.props.hideSpinner();\n\n      var result = _this.state.response3; // time stored in histories should be consisitent across stocks(better for graphs)\n\n      var new_exchange = _this.state.exchanges;\n      result.map(function (exchange) {\n        if (_this.state.exchange[exchange.key()]) {\n          new_exchange[exchange.key()].name = result.name;\n          new_exchange[exchange.key()].listed_companies = result.listed_companies;\n        } else {\n          new_exchange[exchange.key()] = {\n            name: result.name,\n            listed_companies: result.listed_companies\n          };\n        }\n      });\n\n      _this.setState({\n        exchanges: new_exchange\n      });\n    };\n\n    _this.saveAllStockValues = function (event) {\n      var result = event;\n      console.log(result);\n      var new_stocks = _this.state.stocks;\n      result.map(function (stock) {\n        if (_this.state.stocks[stock.ticker]) {\n          new_stocks[stock.ticker].company_name = stock.company_name;\n          new_stocks[stock.ticker].quote_base = stock.quote_base;\n        }\n      });\n\n      _this.setState({\n        stocks: new_stocks\n      });\n    };\n\n    _this.newMarketTrend = function (up_count, down_count) {\n      if (up_count === down_count) return undefined;\n      return up_count > down_count ? 'up' : 'down';\n    };\n\n    _this.toggleStockSelection = function (stock_name) {\n      var new_stocks = _this.state.stocks;\n      new_stocks[stock_name].is_selected = !new_stocks[stock_name].is_selected;\n\n      _this.setState({\n        stocks: new_stocks\n      });\n    };\n\n    _this.resetData = function () {\n      var new_stocks = _this.state.stocks;\n      Object.keys(_this.state.stocks).map(function (stock_name, index) {\n        new_stocks[stock_name].history = [new_stocks[stock_name].history.pop()];\n        new_stocks[stock_name].min = null;\n        new_stocks[stock_name].max = null;\n      });\n\n      _this.setState({\n        stocks: new_stocks\n      });\n    };\n\n    _this.areStocksLoaded = function () {\n      return Object.keys(_this.state.stocks).length > 0;\n    };\n\n    _this.state = {\n      stocks: {},\n      exchanges: {},\n      market_trend: undefined,\n      // 'up' or 'down'\n      connectionError: false,\n      response: false,\n      response1: false,\n      response2: false,\n      response3: false,\n      isToggleOn: true\n    }; // Este enlace es necesario para hacer que `this` funcione en el callback\n\n    _this.handleClick = _this.handleClick.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    return _this;\n  }\n\n  _createClass(Dashboard, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      this.props.hideSpinner();\n    }\n  }, {\n    key: \"handleClick\",\n    value: function handleClick() {\n      if (!this.isToggleOn) {\n        this.componentD();\n      } else {\n        io.sockets.connected.disconnect();\n      }\n\n      this.setState(function (state) {\n        return {\n          isToggleOn: !state.isToggleOn\n        };\n      });\n    }\n  }, {\n    key: \"componentD\",\n    value: function componentD() {\n      var _this2 = this;\n\n      var socket = socketIOClient(stocksUrl, {\n        path: \"/stocks\"\n      });\n      socket.emit(\"STOCKS\", function (data) {});\n      socket.on(\"STOCKS\", function (data) {\n        _this2.saveAllStockValues(data);\n      }); //socket.on(\"STOCKS\", (data) => {console.log(data);})\n\n      socket.on(\"UPDATE\", function (data) {\n        return _this2.setState({\n          response: data\n        });\n      });\n      socket.on(\"UPDATE\", this.saveNewStockValues);\n      socket.on(\"BUY\", function (data) {\n        return _this2.setState({\n          response1: data\n        });\n      });\n      socket.on(\"BUY\", this.saveNewBuyValues);\n      socket.on(\"SELL\", function (data) {\n        return _this2.setState({\n          response2: data\n        });\n      });\n      socket.on(\"SELL\", this.saveNewSellValues); //socket.emit(\"EXCHANGES\", this.saveNewExchangeValues);\n      //socket.on(\"EXCHANGES\", data => this.setState({ response3: data }));\n      //socket.on(\"EXCHANGES\", this.saveNewExchangeValues);\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      return React.createElement(\"div\", {\n        className: \"container\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 193\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"columns\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 194\n        },\n        __self: this\n      }, React.createElement(\"button\", {\n        onClick: this.handleClick,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 195\n        },\n        __self: this\n      }, this.state.isToggleOn ? 'ON' : 'OFF'), React.createElement(StocksList, {\n        stocks: this.state.stocks,\n        toggleStockSelection: this.toggleStockSelection,\n        resetData: this.resetData,\n        market_trend: this.state.market_trend,\n        areStocksLoaded: this.areStocksLoaded,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 198\n        },\n        __self: this\n      }), React.createElement(ExchangeList, {\n        exchanges: this.state.exchanges,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 205\n        },\n        __self: this\n      }), React.createElement(StocksGraph, {\n        stocks: this.state.stocks,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 208\n        },\n        __self: this\n      })), React.createElement(\"div\", {\n        className: this.props.showSpinner ? 'modal is-active' : 'modal',\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 210\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"modal-background\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 211\n        },\n        __self: this\n      }), React.createElement(\"div\", {\n        className: \"modal-content\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 212\n        },\n        __self: this\n      }, React.createElement(StocksLoaderStatus, {\n        connectionError: this.state.connectionError,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 213\n        },\n        __self: this\n      }))));\n    }\n  }]);\n\n  return Dashboard;\n}(React.Component);\n\nexport default Dashboard;","map":{"version":3,"sources":["/Users/francisca/iCloud Drive (archivo)/Documents/Documentos - MacBook Pro de Francisca/ING 9 SEMESTRE/Taller de Integración/stocks-master-tarea3/src/components/Dashboard.jsx"],"names":["React","bulma","StocksList","ExchangeList","StocksGraph","StocksLoaderStatus","socketIOClient","stocksUrl","Dashboard","props","saveNewStockValues","event","hideSpinner","result","state","response","up_values_count","down_values_count","new_stocks","stocks","ticker","current_value","Number","value","change","history","push","time","min","max","volumen_buy","volumen_sell","is_selected","setState","market_trend","newMarketTrend","saveNewBuyValues","response1","volume","saveNewSellValues","response2","saveNewExchangeValues","response3","new_exchange","exchanges","map","exchange","key","name","listed_companies","saveAllStockValues","console","log","stock","company_name","quote_base","up_count","down_count","undefined","toggleStockSelection","stock_name","resetData","Object","keys","index","pop","areStocksLoaded","length","connectionError","isToggleOn","handleClick","bind","componentD","io","sockets","connected","disconnect","socket","path","emit","data","on","showSpinner","Component"],"mappings":"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","sourcesContent":["import React from 'react'\nimport * as bulma from \"reactbulma\";\nimport StocksList from \"./StocksList.jsx\";\nimport ExchangeList from \"./ExchangeList.jsx\";\nimport StocksGraph from \"./StocksGraph.jsx\";\nimport StocksLoaderStatus from \"./StocksLoaderStatus.jsx\";\nimport socketIOClient from \"socket.io-client\";\n\nconst stocksUrl = 'wss://le-18262636.bitzonte.com';\n\nclass Dashboard extends React.Component {\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      stocks: {},\n      exchanges: {},\n      market_trend: undefined, // 'up' or 'down'\n      connectionError: false,\n      response: false,\n      response1: false,\n      response2: false,\n      response3: false,\n      isToggleOn: true};\n\n    // Este enlace es necesario para hacer que `this` funcione en el callback\n    this.handleClick = this.handleClick.bind(this);\n  }\n\n  componentDidMount() {\n    this.props.hideSpinner();\n  }\n\n  handleClick() {\n    if(!this.isToggleOn){\n      this.componentD();\n    }\n    else{\n      io.sockets.connected.disconnect();\n    }\n    this.setState(state => ({\n      isToggleOn: !state.isToggleOn\n    }));\n  }\n\n  componentD(){\n    const socket = socketIOClient(stocksUrl, {path: \"/stocks\"});\n\n    socket.emit(\"STOCKS\", (data) => {});\n    socket.on(\"STOCKS\", (data) => {\n      this.saveAllStockValues(data);\n    });\n    //socket.on(\"STOCKS\", (data) => {console.log(data);})\n\n    socket.on(\"UPDATE\", data => this.setState({ response: data }));\n    socket.on(\"UPDATE\", this.saveNewStockValues);\n\n    socket.on(\"BUY\", data => this.setState({ response1: data }));\n    socket.on(\"BUY\", this.saveNewBuyValues);\n\n    socket.on(\"SELL\", data => this.setState({ response2: data }));\n    socket.on(\"SELL\", this.saveNewSellValues);\n\n    //socket.emit(\"EXCHANGES\", this.saveNewExchangeValues);\n    //socket.on(\"EXCHANGES\", data => this.setState({ response3: data }));\n    //socket.on(\"EXCHANGES\", this.saveNewExchangeValues);\n  }\n\n  saveNewStockValues = (event) => {\n    this.props.hideSpinner();\n    let result = this.state.response;\n    let [up_values_count, down_values_count] = [0, 0];\n\n    // time stored in histories should be consisitent across stocks(better for graphs)\n    let new_stocks = this.state.stocks\n\n    if(this.state.stocks[result.ticker])\n    {\n      new_stocks[result.ticker].current_value > Number(result.value) ? up_values_count++ : down_values_count++;\n      new_stocks[result.ticker].change = ((Number(result.value) - new_stocks[result.ticker].current_value) / new_stocks[result.ticker].current_value ) * 100\n      new_stocks[result.ticker].current_value = Number(result.value)\n      new_stocks[result.ticker].history.push({time: result.time, value: Number(result.value)})\n\n      if(new_stocks[result.ticker].min > Number(result.value) || new_stocks[result.ticker].min == null)\n      {\n        new_stocks[result.ticker].min = Number(result.value)\n      }\n      if(new_stocks[result.ticker].max < Number(result.value))\n      {\n        new_stocks[result.ticker].max = Number(result.value)\n      }\n    }\n    else\n    {\n      new_stocks[result.ticker] = { current_value: result.value, volumen_buy:0, volumen_sell:0, history: [{time: result.time, value: Number(result.value)}], min: Number(result.value), max: Number(result.value), change: 0,is_selected: false }\n    }\n    this.setState({stocks: new_stocks, market_trend: this.newMarketTrend(up_values_count, down_values_count)})\n  }\n\n\n  saveNewBuyValues = (event) => {\n    this.props.hideSpinner();\n    let result = this.state.response1;\n\n    let new_stocks = this.state.stocks\n    if(this.state.stocks[result.ticker])\n    {\n      new_stocks[result.ticker].volumen_buy += result.volume;\n    }\n    this.setState({stocks: new_stocks})\n\n  }\n\n  saveNewSellValues = (event) => {\n    this.props.hideSpinner();\n    let result = this.state.response2;\n\n    let new_stocks = this.state.stocks\n    if(this.state.stocks[result.ticker])\n    {\n      new_stocks[result.ticker].volumen_sell += result.volume;\n    }\n    this.setState({stocks: new_stocks})\n\n  }\n\n  saveNewExchangeValues = (event) => {\n    this.props.hideSpinner();\n    let result = this.state.response3;\n\n    // time stored in histories should be consisitent across stocks(better for graphs)\n    let new_exchange = this.state.exchanges\n\n    result.map((exchange) =>\n    {\n      if(this.state.exchange[exchange.key()])\n      {\n        new_exchange[exchange.key()].name = result.name;\n        new_exchange[exchange.key()].listed_companies = result.listed_companies\n      }\n      else\n      {\n        new_exchange[exchange.key()] = { name: result.name, listed_companies: result.listed_companies}\n      }\n    });\n    this.setState({exchanges: new_exchange})\n  }\n\n\n  saveAllStockValues = (event) => {\n    let result = event;\n\n    console.log(result);\n    let new_stocks = this.state.stocks\n    result.map((stock) =>\n    {\n      if(this.state.stocks[stock.ticker]){\n        new_stocks[stock.ticker].company_name = stock.company_name;\n        new_stocks[stock.ticker].quote_base = stock.quote_base;\n      }\n    });\n    this.setState({stocks: new_stocks})\n  }\n\n  newMarketTrend = (up_count, down_count) => {\n    if(up_count === down_count) return undefined;\n    return up_count > down_count ? 'up' : 'down'\n  }\n\n  toggleStockSelection = (stock_name) => {\n    let new_stocks = this.state.stocks;\n    new_stocks[stock_name].is_selected = !new_stocks[stock_name].is_selected\n    this.setState({ stocks: new_stocks })\n  }\n\n  resetData = () => {\n    let new_stocks = this.state.stocks;\n    Object.keys(this.state.stocks).map((stock_name, index) =>\n    {\n      new_stocks[stock_name].history = [new_stocks[stock_name].history.pop()];\n      new_stocks[stock_name].min = null;\n      new_stocks[stock_name].max = null;\n    });\n    this.setState({ stocks: new_stocks });\n  }\n\n  areStocksLoaded = () => {\n    return Object.keys(this.state.stocks).length > 0;\n  }\n\n  render() {\n    return (\n      <div className='container'>\n        <div className='columns'>\n        <button onClick={this.handleClick}>\n          {this.state.isToggleOn ? 'ON' : 'OFF'}\n        </button>\n          <StocksList\n            stocks={this.state.stocks}\n            toggleStockSelection={this.toggleStockSelection}\n            resetData={this.resetData}\n            market_trend={this.state.market_trend}\n            areStocksLoaded={this.areStocksLoaded}\n          />\n          <ExchangeList\n            exchanges={this.state.exchanges}\n          />\n          <StocksGraph stocks={this.state.stocks} />\n        </div>\n        <div className={ this.props.showSpinner ? 'modal is-active' : 'modal' }>\n          <div className=\"modal-background\"></div>\n          <div className=\"modal-content\">\n            <StocksLoaderStatus connectionError={this.state.connectionError} />\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default Dashboard;\n"]},"metadata":{},"sourceType":"module"}