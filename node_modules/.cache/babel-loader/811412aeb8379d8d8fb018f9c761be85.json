{"ast":null,"code":"import _classCallCheck from \"/Users/francisca/iCloud Drive (archivo)/Documents/Documentos - MacBook Pro de Francisca/ING 9 SEMESTRE/Taller de Integracio\\u0301n/stocks-master-tarea3/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/francisca/iCloud Drive (archivo)/Documents/Documentos - MacBook Pro de Francisca/ING 9 SEMESTRE/Taller de Integracio\\u0301n/stocks-master-tarea3/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/francisca/iCloud Drive (archivo)/Documents/Documentos - MacBook Pro de Francisca/ING 9 SEMESTRE/Taller de Integracio\\u0301n/stocks-master-tarea3/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/francisca/iCloud Drive (archivo)/Documents/Documentos - MacBook Pro de Francisca/ING 9 SEMESTRE/Taller de Integracio\\u0301n/stocks-master-tarea3/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/francisca/iCloud Drive (archivo)/Documents/Documentos - MacBook Pro de Francisca/ING 9 SEMESTRE/Taller de Integracio\\u0301n/stocks-master-tarea3/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/francisca/iCloud Drive (archivo)/Documents/Documentos - MacBook Pro de Francisca/ING 9 SEMESTRE/Taller de Integracio\\u0301n/stocks-master-tarea3/src/components/Dashboard.jsx\";\nimport React from 'react';\nimport * as bulma from \"reactbulma\";\nimport StocksList from \"./StocksList.jsx\";\nimport ExchangeList from \"./ExchangeList.jsx\";\nimport StocksGraph from \"./StocksGraph.jsx\";\nimport StocksLoaderStatus from \"./StocksLoaderStatus.jsx\";\nimport socketIOClient from \"socket.io-client\";\nvar stocksUrl = 'wss://le-18262636.bitzonte.com';\n\nvar Dashboard =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(Dashboard, _React$Component);\n\n  function Dashboard(props) {\n    var _this;\n\n    _classCallCheck(this, Dashboard);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(Dashboard).call(this, props));\n\n    _this.saveNewStockValues = function (event) {\n      _this.props.hideSpinner();\n\n      var result = _this.state.response;\n      var up_values_count = 0,\n          down_values_count = 0; // time stored in histories should be consisitent across stocks(better for graphs)\n\n      var new_stocks = _this.state.stocks;\n\n      if (_this.state.stocks[result.ticker]) {\n        new_stocks[result.ticker].current_value > Number(result.value) ? up_values_count++ : down_values_count++;\n        new_stocks[result.ticker].change = (Number(result.value) - new_stocks[result.ticker].current_value) / new_stocks[result.ticker].current_value * 100;\n        new_stocks[result.ticker].current_value = Number(result.value);\n        new_stocks[result.ticker].history.push({\n          time: result.time,\n          value: Number(result.value)\n        });\n\n        if (new_stocks[result.ticker].min > Number(result.value) || new_stocks[result.ticker].min == null) {\n          new_stocks[result.ticker].min = Number(result.value);\n        }\n\n        if (new_stocks[result.ticker].max < Number(result.value)) {\n          new_stocks[result.ticker].max = Number(result.value);\n        }\n      } else {\n        new_stocks[result.ticker] = {\n          current_value: result.value,\n          volumen_buy: 0,\n          volumen_sell: 0,\n          history: [{\n            time: result.time,\n            value: Number(result.value)\n          }],\n          min: Number(result.value),\n          max: Number(result.value),\n          change: 0,\n          is_selected: false\n        };\n      }\n\n      _this.setState({\n        stocks: new_stocks,\n        market_trend: _this.newMarketTrend(up_values_count, down_values_count)\n      });\n    };\n\n    _this.saveNewBuyValues = function (event) {\n      _this.props.hideSpinner();\n\n      var result = _this.state.response1;\n      var new_stocks = _this.state.stocks;\n      var new_exchange = _this.state.exchanges;\n\n      if (_this.state.stocks[result.ticker]) {\n        new_stocks[result.ticker].volumen_buy += result.volume;\n\n        for (var key in _this.state.exchanges) {\n          if (_this.state.exchanges[key].listed_companies.indexOf(_this.state.all_stocks[result.ticker].company_name) > -1) {\n            new_exchange[key].volumen_buy += result.volume;\n          }\n        }\n      }\n\n      _this.setState({\n        stocks: new_stocks,\n        exchanges: new_exchange\n      });\n    };\n\n    _this.saveNewSellValues = function (event) {\n      _this.props.hideSpinner();\n\n      var result = _this.state.response2;\n      var new_stocks = _this.state.stocks;\n      var new_exchange = _this.state.exchanges;\n\n      if (_this.state.stocks[result.ticker]) {\n        new_stocks[result.ticker].volumen_sell += result.volume;\n\n        for (var key in _this.state.exchanges) {\n          if (_this.state.exchanges[key].listed_companies.indexOf(_this.state.all_stocks[result.ticker].company_name) > -1) {\n            new_exchange[key].volumen_sell += result.volume;\n          }\n        }\n      }\n\n      _this.setState({\n        stocks: new_stocks,\n        exchanges: new_exchange\n      });\n    };\n\n    _this.saveNewExchangeValues = function (event) {\n      var result = event;\n      console.log(\"HOLA!!\");\n      var new_exchange = _this.state.exchanges;\n\n      for (var key in result) {\n        if (new_exchange.hasOwnProperty(key)) {\n          new_exchange[key].name = result[key].name;\n          new_exchange[key].listed_companies = result[key].listed_companies;\n        } else {\n          new_exchange[key] = {\n            name: result[key].name,\n            listed_companies: result[key].listed_companies,\n            volumen_sell: 0,\n            volumen_buy: 0,\n            participacion: 0\n          };\n        }\n      }\n\n      _this.setState({\n        exchanges: new_exchange\n      });\n    };\n\n    _this.saveAllStockValues = function (event) {\n      var result = event;\n      console.log(result);\n      var new_stocks = _this.state.all_stocks;\n      result.map(function (stock) {\n        new_stocks[stock.ticker] = {\n          company_name: stock.company_name,\n          quote_base: stock.quote_base\n        };\n      });\n\n      _this.setState({\n        all_stocks: new_stocks\n      });\n    };\n\n    _this.newMarketTrend = function (up_count, down_count) {\n      if (up_count === down_count) return undefined;\n      return up_count > down_count ? 'up' : 'down';\n    };\n\n    _this.toggleStockSelection = function (stock_name) {\n      var new_stocks = _this.state.stocks;\n      new_stocks[stock_name].is_selected = !new_stocks[stock_name].is_selected;\n\n      _this.setState({\n        stocks: new_stocks\n      });\n    };\n\n    _this.resetData = function () {\n      var new_stocks = _this.state.stocks;\n      Object.keys(_this.state.stocks).map(function (stock_name, index) {\n        new_stocks[stock_name].history = [new_stocks[stock_name].history.pop()];\n        new_stocks[stock_name].min = null;\n        new_stocks[stock_name].max = null;\n      });\n\n      _this.setState({\n        stocks: new_stocks\n      });\n    };\n\n    _this.areStocksLoaded = function () {\n      return Object.keys(_this.state.stocks).length > 0;\n    };\n\n    _this.state = {\n      all_stocks: {},\n      stocks: {},\n      exchanges: {},\n      market_trend: undefined,\n      // 'up' or 'down'\n      connectionError: false,\n      response: false,\n      response1: false,\n      response2: false,\n      response3: false,\n      isToggleOn: true\n    };\n    return _this;\n  }\n\n  _createClass(Dashboard, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var _this2 = this;\n\n      this.props.hideSpinner();\n      var socket = socketIOClient(stocksUrl, {\n        path: \"/stocks\"\n      });\n      socket.emit(\"STOCKS\", function (data) {});\n      socket.on(\"STOCKS\", function (data) {\n        _this2.saveAllStockValues(data);\n      }); //socket.on(\"STOCKS\", (data) => {console.log(data);})\n\n      socket.on(\"UPDATE\", function (data) {\n        return _this2.setState({\n          response: data\n        });\n      });\n      socket.on(\"UPDATE\", this.saveNewStockValues);\n      socket.on(\"BUY\", function (data) {\n        return _this2.setState({\n          response1: data\n        });\n      });\n      socket.on(\"BUY\", this.saveNewBuyValues);\n      socket.on(\"SELL\", function (data) {\n        return _this2.setState({\n          response2: data\n        });\n      });\n      socket.on(\"SELL\", this.saveNewSellValues);\n      socket.emit(\"EXCHANGES\", function (data) {});\n      socket.on(\"EXCHANGES\", function (data) {\n        _this2.saveNewExchangeValues(data);\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      return React.createElement(\"div\", {\n        className: \"container\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 186\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"rows\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 187\n        },\n        __self: this\n      }, React.createElement(ExchangeList, {\n        exchanges: this.state.exchanges,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 188\n        },\n        __self: this\n      }), React.createElement(StocksList, {\n        stocks: this.state.stocks,\n        toggleStockSelection: this.toggleStockSelection,\n        resetData: this.resetData,\n        market_trend: this.state.market_trend,\n        areStocksLoaded: this.areStocksLoaded,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 191\n        },\n        __self: this\n      }), React.createElement(StocksGraph, {\n        stocks: this.state.stocks,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 198\n        },\n        __self: this\n      })), React.createElement(\"div\", {\n        className: this.props.showSpinner ? 'modal is-active' : 'modal',\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 200\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"modal-background\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 201\n        },\n        __self: this\n      }), React.createElement(\"div\", {\n        className: \"modal-content\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 202\n        },\n        __self: this\n      }, React.createElement(StocksLoaderStatus, {\n        connectionError: this.state.connectionError,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 203\n        },\n        __self: this\n      }))));\n    }\n  }]);\n\n  return Dashboard;\n}(React.Component);\n\nexport default Dashboard;","map":{"version":3,"sources":["/Users/francisca/iCloud Drive (archivo)/Documents/Documentos - MacBook Pro de Francisca/ING 9 SEMESTRE/Taller de Integración/stocks-master-tarea3/src/components/Dashboard.jsx"],"names":["React","bulma","StocksList","ExchangeList","StocksGraph","StocksLoaderStatus","socketIOClient","stocksUrl","Dashboard","props","saveNewStockValues","event","hideSpinner","result","state","response","up_values_count","down_values_count","new_stocks","stocks","ticker","current_value","Number","value","change","history","push","time","min","max","volumen_buy","volumen_sell","is_selected","setState","market_trend","newMarketTrend","saveNewBuyValues","response1","new_exchange","exchanges","volume","key","listed_companies","indexOf","all_stocks","company_name","saveNewSellValues","response2","saveNewExchangeValues","console","log","hasOwnProperty","name","participacion","saveAllStockValues","map","stock","quote_base","up_count","down_count","undefined","toggleStockSelection","stock_name","resetData","Object","keys","index","pop","areStocksLoaded","length","connectionError","response3","isToggleOn","socket","path","emit","data","on","showSpinner","Component"],"mappings":"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","sourcesContent":["import React from 'react'\nimport * as bulma from \"reactbulma\";\nimport StocksList from \"./StocksList.jsx\";\nimport ExchangeList from \"./ExchangeList.jsx\";\nimport StocksGraph from \"./StocksGraph.jsx\";\nimport StocksLoaderStatus from \"./StocksLoaderStatus.jsx\";\nimport socketIOClient from \"socket.io-client\";\n\nconst stocksUrl = 'wss://le-18262636.bitzonte.com';\n\nclass Dashboard extends React.Component {\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      all_stocks:{},\n      stocks: {},\n      exchanges: {},\n      market_trend: undefined, // 'up' or 'down'\n      connectionError: false,\n      response: false,\n      response1: false,\n      response2: false,\n      response3: false,\n      isToggleOn: true};\n\n  }\n\n  componentDidMount(){\n    this.props.hideSpinner();\n    const socket = socketIOClient(stocksUrl, {path: \"/stocks\"});\n\n    socket.emit(\"STOCKS\", (data) => {});\n    socket.on(\"STOCKS\", (data) => {\n      this.saveAllStockValues(data);\n    });\n    //socket.on(\"STOCKS\", (data) => {console.log(data);})\n\n    socket.on(\"UPDATE\", data => this.setState({ response: data }));\n    socket.on(\"UPDATE\", this.saveNewStockValues);\n\n    socket.on(\"BUY\", data => this.setState({ response1: data }));\n    socket.on(\"BUY\", this.saveNewBuyValues);\n\n    socket.on(\"SELL\", data => this.setState({ response2: data }));\n    socket.on(\"SELL\", this.saveNewSellValues);\n\n    socket.emit(\"EXCHANGES\", (data) => {});\n    socket.on(\"EXCHANGES\", (data) => {\n      this.saveNewExchangeValues(data)\n    });\n  }\n\n  saveNewStockValues = (event) => {\n    this.props.hideSpinner();\n    let result = this.state.response;\n    let [up_values_count, down_values_count] = [0, 0];\n\n    // time stored in histories should be consisitent across stocks(better for graphs)\n    let new_stocks = this.state.stocks\n\n    if(this.state.stocks[result.ticker])\n    {\n      new_stocks[result.ticker].current_value > Number(result.value) ? up_values_count++ : down_values_count++;\n      new_stocks[result.ticker].change = ((Number(result.value) - new_stocks[result.ticker].current_value) / new_stocks[result.ticker].current_value ) * 100\n      new_stocks[result.ticker].current_value = Number(result.value)\n      new_stocks[result.ticker].history.push({time: result.time, value: Number(result.value)})\n\n      if(new_stocks[result.ticker].min > Number(result.value) || new_stocks[result.ticker].min == null)\n      {\n        new_stocks[result.ticker].min = Number(result.value)\n      }\n      if(new_stocks[result.ticker].max < Number(result.value))\n      {\n        new_stocks[result.ticker].max = Number(result.value)\n      }\n    }\n    else\n    {\n      new_stocks[result.ticker] = { current_value: result.value, volumen_buy:0, volumen_sell:0, history: [{time: result.time, value: Number(result.value)}], min: Number(result.value), max: Number(result.value), change: 0,is_selected: false }\n    }\n    this.setState({stocks: new_stocks, market_trend: this.newMarketTrend(up_values_count, down_values_count)})\n  }\n\n\n  saveNewBuyValues = (event) => {\n    this.props.hideSpinner();\n    let result = this.state.response1;\n\n    let new_stocks = this.state.stocks\n    let new_exchange = this.state.exchanges\n    if(this.state.stocks[result.ticker])\n    {\n      new_stocks[result.ticker].volumen_buy += result.volume;\n\n      for (var key in this.state.exchanges) {\n        if(this.state.exchanges[key].listed_companies.indexOf(this.state.all_stocks[result.ticker].company_name) > -1 ){\n          new_exchange[key].volumen_buy += result.volume\n        }\n      }\n    }\n    this.setState({stocks: new_stocks, exchanges: new_exchange})\n  }\n\n  saveNewSellValues = (event) => {\n    this.props.hideSpinner();\n    let result = this.state.response2;\n\n    let new_stocks = this.state.stocks\n    let new_exchange = this.state.exchanges\n    if(this.state.stocks[result.ticker])\n    {\n      new_stocks[result.ticker].volumen_sell += result.volume;\n\n      for (var key in this.state.exchanges) {\n        if(this.state.exchanges[key].listed_companies.indexOf(this.state.all_stocks[result.ticker].company_name) > -1 ){\n          new_exchange[key].volumen_sell += result.volume\n        }\n      }\n    }\n    this.setState({stocks: new_stocks, exchanges: new_exchange})\n\n  }\n\n  saveNewExchangeValues = (event) => {\n    let result = event;\n    console.log(\"HOLA!!\");\n\n    let new_exchange = this.state.exchanges\n\n    for (var key in result) {\n      if (new_exchange.hasOwnProperty(key)) {\n        new_exchange[key].name = result[key].name;\n        new_exchange[key].listed_companies = result[key].listed_companies\n      }\n      else\n      {\n        new_exchange[key] = { name: result[key].name, listed_companies: result[key].listed_companies, volumen_sell: 0, volumen_buy: 0, participacion: 0}\n\n      }\n    }\n    this.setState({exchanges: new_exchange})\n  }\n\n\n  saveAllStockValues = (event) => {\n    let result = event;\n\n    console.log(result);\n    let new_stocks = this.state.all_stocks\n    result.map((stock) =>\n    {\n      new_stocks[stock.ticker] = {company_name: stock.company_name, quote_base: stock.quote_base}\n    });\n    this.setState({all_stocks: new_stocks})\n  }\n\n  newMarketTrend = (up_count, down_count) => {\n    if(up_count === down_count) return undefined;\n    return up_count > down_count ? 'up' : 'down'\n  }\n\n  toggleStockSelection = (stock_name) => {\n    let new_stocks = this.state.stocks;\n    new_stocks[stock_name].is_selected = !new_stocks[stock_name].is_selected\n    this.setState({ stocks: new_stocks })\n  }\n\n  resetData = () => {\n    let new_stocks = this.state.stocks;\n    Object.keys(this.state.stocks).map((stock_name, index) =>\n    {\n      new_stocks[stock_name].history = [new_stocks[stock_name].history.pop()];\n      new_stocks[stock_name].min = null;\n      new_stocks[stock_name].max = null;\n    });\n    this.setState({ stocks: new_stocks });\n  }\n\n  areStocksLoaded = () => {\n    return Object.keys(this.state.stocks).length > 0;\n  }\n\n  render() {\n    return (\n      <div className='container'>\n        <div className='rows'>\n            <ExchangeList\n              exchanges={this.state.exchanges}\n            />\n            <StocksList\n              stocks={this.state.stocks}\n              toggleStockSelection={this.toggleStockSelection}\n              resetData={this.resetData}\n              market_trend={this.state.market_trend}\n              areStocksLoaded={this.areStocksLoaded}\n            />\n            <StocksGraph stocks={this.state.stocks} />\n          </div>\n          <div className={ this.props.showSpinner ? 'modal is-active' : 'modal' }>\n            <div className=\"modal-background\"></div>\n            <div className=\"modal-content\">\n              <StocksLoaderStatus connectionError={this.state.connectionError} />\n            </div>\n          </div>\n        </div>\n    );\n  }\n}\n\nexport default Dashboard;\n"]},"metadata":{},"sourceType":"module"}