{"ast":null,"code":"import _classCallCheck from \"/Users/francisca/iCloud Drive (archivo)/Documents/Documentos - MacBook Pro de Francisca/ING 9 SEMESTRE/Taller de Integracio\\u0301n/stocks-master-tarea3/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/francisca/iCloud Drive (archivo)/Documents/Documentos - MacBook Pro de Francisca/ING 9 SEMESTRE/Taller de Integracio\\u0301n/stocks-master-tarea3/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/francisca/iCloud Drive (archivo)/Documents/Documentos - MacBook Pro de Francisca/ING 9 SEMESTRE/Taller de Integracio\\u0301n/stocks-master-tarea3/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/francisca/iCloud Drive (archivo)/Documents/Documentos - MacBook Pro de Francisca/ING 9 SEMESTRE/Taller de Integracio\\u0301n/stocks-master-tarea3/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/francisca/iCloud Drive (archivo)/Documents/Documentos - MacBook Pro de Francisca/ING 9 SEMESTRE/Taller de Integracio\\u0301n/stocks-master-tarea3/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/francisca/iCloud Drive (archivo)/Documents/Documentos - MacBook Pro de Francisca/ING 9 SEMESTRE/Taller de Integracio\\u0301n/stocks-master-tarea3/src/components/Dashboard.jsx\";\nimport React from 'react';\nimport * as bulma from \"reactbulma\";\nimport StocksList from \"./StocksList.jsx\";\nimport ExchangeList from \"./ExchangeList.jsx\";\nimport StocksGraph from \"./StocksGraph.jsx\";\nimport StocksLoaderStatus from \"./StocksLoaderStatus.jsx\";\nimport socketIOClient from \"socket.io-client\";\nvar stocksUrl = 'wss://le-18262636.bitzonte.com';\n\nvar Dashboard =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(Dashboard, _React$Component);\n\n  function Dashboard() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, Dashboard);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(Dashboard)).call.apply(_getPrototypeOf2, [this].concat(args)));\n    _this.state = {\n      // stocks = {name: {current_value: 12, history: [{time: '2131', value: 45}, ...], is_selected: false}, ...}\n      stocks: {},\n      exchanges: {},\n      market_trend: undefined,\n      // 'up' or 'down'\n      connectionError: false,\n      response: false,\n      response1: false,\n      response2: false,\n      response3: false,\n      response4: []\n    };\n\n    _this.componentDidMount = function () {\n      var socket = socketIOClient(stocksUrl, {\n        path: \"/stocks\"\n      });\n      socket.on(\"UPDATE\", function (data) {\n        return _this.setState({\n          response: data\n        });\n      });\n      socket.on(\"UPDATE\", _this.saveNewStockValues);\n      socket.on(\"BUY\", function (data) {\n        return _this.setState({\n          response1: data\n        });\n      });\n      socket.on(\"BUY\", _this.saveNewBuyValues);\n      socket.on(\"SELL\", function (data) {\n        return _this.setState({\n          response2: data\n        });\n      });\n      socket.on(\"SELL\", _this.saveNewSellValues); //socket.emit(\"EXCHANGES\", this.saveNewExchangeValues);\n      //socket.on(\"EXCHANGES\", data => this.setState({ response3: data }));\n      //socket.on(\"EXCHANGES\", this.saveNewExchangeValues);\n\n      socket.emit(\"STOCKS\", function (data) {});\n      socket.on(\"STOCKS\", function (data) {\n        console.log(data);\n      });\n      socket.on(\"STOCKS\", function (data) {\n        return _this.setState({\n          response4: data\n        });\n      });\n    };\n\n    _this.saveNewStockValues = function (event) {\n      _this.props.hideSpinner();\n\n      var result = _this.state.response;\n      var up_values_count = 0,\n          down_values_count = 0; // time stored in histories should be consisitent across stocks(better for graphs)\n\n      var new_stocks = _this.state.stocks;\n\n      if (_this.state.stocks[result.ticker]) {\n        new_stocks[result.ticker].current_value > Number(result.value) ? up_values_count++ : down_values_count++;\n        new_stocks[result.ticker].change = (Number(result.value) - new_stocks[result.ticker].current_value) / new_stocks[result.ticker].current_value * 100;\n        new_stocks[result.ticker].current_value = Number(result.value);\n        new_stocks[result.ticker].history.push({\n          time: result.time,\n          value: Number(result.value)\n        });\n\n        if (new_stocks[result.ticker].min > Number(result.value) || new_stocks[result.ticker].min == null) {\n          new_stocks[result.ticker].min = Number(result.value);\n        }\n\n        if (new_stocks[result.ticker].max < Number(result.value)) {\n          new_stocks[result.ticker].max = Number(result.value);\n        }\n      } else {\n        new_stocks[result.ticker] = {\n          current_value: result.value,\n          volumen_buy: 0,\n          volumen_sell: 0,\n          history: [{\n            time: result.time,\n            value: Number(result.value)\n          }],\n          min: Number(result.value),\n          max: Number(result.value),\n          change: 0,\n          is_selected: false\n        };\n      }\n\n      _this.setState({\n        stocks: new_stocks,\n        market_trend: _this.newMarketTrend(up_values_count, down_values_count)\n      });\n    };\n\n    _this.saveNewBuyValues = function (event) {\n      _this.props.hideSpinner();\n\n      var result = _this.state.response1;\n      var new_stocks = _this.state.stocks;\n\n      if (_this.state.stocks[result.ticker]) {\n        new_stocks[result.ticker].volumen_buy += result.volume;\n      }\n\n      _this.setState({\n        stocks: new_stocks\n      });\n    };\n\n    _this.saveNewSellValues = function (event) {\n      _this.props.hideSpinner();\n\n      var result = _this.state.response2;\n      var new_stocks = _this.state.stocks;\n\n      if (_this.state.stocks[result.ticker]) {\n        new_stocks[result.ticker].volumen_sell += result.volume;\n      }\n\n      _this.setState({\n        stocks: new_stocks\n      });\n    };\n\n    _this.saveNewExchangeValues = function (event) {\n      _this.props.hideSpinner();\n\n      var result = _this.state.response3; // time stored in histories should be consisitent across stocks(better for graphs)\n\n      var new_exchange = _this.state.exchanges;\n      result.map(function (exchange) {\n        if (_this.state.exchange[exchange.key()]) {\n          new_exchange[exchange.key()].name = result.name;\n          new_exchange[exchange.key()].listed_companies = result.listed_companies;\n        } else {\n          new_exchange[exchange.key()] = {\n            name: result.name,\n            listed_companies: result.listed_companies\n          };\n        }\n      });\n\n      _this.setState({\n        exchanges: new_exchange\n      });\n    };\n\n    _this.newMarketTrend = function (up_count, down_count) {\n      if (up_count === down_count) return undefined;\n      return up_count > down_count ? 'up' : 'down';\n    };\n\n    _this.toggleStockSelection = function (stock_name) {\n      var new_stocks = _this.state.stocks;\n      new_stocks[stock_name].is_selected = !new_stocks[stock_name].is_selected;\n\n      _this.setState({\n        stocks: new_stocks\n      });\n    };\n\n    _this.resetData = function () {\n      var new_stocks = _this.state.stocks;\n      Object.keys(_this.state.stocks).map(function (stock_name, index) {\n        new_stocks[stock_name].history = [new_stocks[stock_name].history.pop()];\n        new_stocks[stock_name].min = null;\n        new_stocks[stock_name].max = null;\n      });\n\n      _this.setState({\n        stocks: new_stocks\n      });\n    };\n\n    _this.areStocksLoaded = function () {\n      return Object.keys(_this.state.stocks).length > 0;\n    };\n\n    return _this;\n  }\n\n  _createClass(Dashboard, [{\n    key: \"saveAllStockValues\",\n    value: function saveAllStockValues() {\n      this.props.hideSpinner();\n      var result = this.state.response4;\n      console.log(result);\n      var new_stocks = this.state.stocks;\n      result.map(function (stock) {\n        new_stocks[stock.ticker] = {\n          company_name: stock.company_name,\n          quote_base: stock.quote_base,\n          current_value: 0,\n          volumen_buy: 0,\n          volumen_sell: 0,\n          history: [],\n          min: null,\n          max: null,\n          change: 0,\n          is_selected: false\n        };\n      });\n      this.setState({\n        stocks: new_stocks\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      return React.createElement(\"div\", {\n        className: \"container\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 168\n        },\n        __self: this\n      }, React.createElement(\"button\", {\n        onClick: function onClick() {\n          return _this2.saveAllStocksValues();\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 169\n        },\n        __self: this\n      }, \"Cargar STOCKS\"), React.createElement(\"div\", {\n        className: \"columns\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 170\n        },\n        __self: this\n      }, React.createElement(StocksList, {\n        stocks: this.state.stocks,\n        toggleStockSelection: this.toggleStockSelection,\n        resetData: this.resetData,\n        market_trend: this.state.market_trend,\n        areStocksLoaded: this.areStocksLoaded,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 171\n        },\n        __self: this\n      }), React.createElement(ExchangeList, {\n        exchanges: this.state.exchanges,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 178\n        },\n        __self: this\n      }), React.createElement(StocksGraph, {\n        stocks: this.state.stocks,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 181\n        },\n        __self: this\n      })), React.createElement(\"div\", {\n        className: this.props.showSpinner ? 'modal is-active' : 'modal',\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 183\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"modal-background\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 184\n        },\n        __self: this\n      }), React.createElement(\"div\", {\n        className: \"modal-content\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 185\n        },\n        __self: this\n      }, React.createElement(StocksLoaderStatus, {\n        connectionError: this.state.connectionError,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 186\n        },\n        __self: this\n      }))));\n    }\n  }]);\n\n  return Dashboard;\n}(React.Component);\n\nexport default Dashboard;","map":{"version":3,"sources":["/Users/francisca/iCloud Drive (archivo)/Documents/Documentos - MacBook Pro de Francisca/ING 9 SEMESTRE/Taller de Integración/stocks-master-tarea3/src/components/Dashboard.jsx"],"names":["React","bulma","StocksList","ExchangeList","StocksGraph","StocksLoaderStatus","socketIOClient","stocksUrl","Dashboard","state","stocks","exchanges","market_trend","undefined","connectionError","response","response1","response2","response3","response4","componentDidMount","socket","path","on","data","setState","saveNewStockValues","saveNewBuyValues","saveNewSellValues","emit","console","log","event","props","hideSpinner","result","up_values_count","down_values_count","new_stocks","ticker","current_value","Number","value","change","history","push","time","min","max","volumen_buy","volumen_sell","is_selected","newMarketTrend","volume","saveNewExchangeValues","new_exchange","map","exchange","key","name","listed_companies","up_count","down_count","toggleStockSelection","stock_name","resetData","Object","keys","index","pop","areStocksLoaded","length","stock","company_name","quote_base","saveAllStocksValues","showSpinner","Component"],"mappings":"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","sourcesContent":["import React from 'react'\nimport * as bulma from \"reactbulma\";\nimport StocksList from \"./StocksList.jsx\";\nimport ExchangeList from \"./ExchangeList.jsx\";\nimport StocksGraph from \"./StocksGraph.jsx\";\nimport StocksLoaderStatus from \"./StocksLoaderStatus.jsx\";\nimport socketIOClient from \"socket.io-client\";\n\nconst stocksUrl = 'wss://le-18262636.bitzonte.com';\n\nclass Dashboard extends React.Component {\n\n  state = {\n  // stocks = {name: {current_value: 12, history: [{time: '2131', value: 45}, ...], is_selected: false}, ...}\n   stocks: {},\n   exchanges: {},\n   market_trend: undefined, // 'up' or 'down'\n   connectionError: false,\n   response: false,\n   response1: false,\n   response2: false,\n   response3: false,\n   response4: []\n  }\n\n  componentDidMount = () => {\n    const socket = socketIOClient(stocksUrl, {path: \"/stocks\"});\n\n    socket.on(\"UPDATE\", data => this.setState({ response: data }));\n    socket.on(\"UPDATE\", this.saveNewStockValues);\n\n    socket.on(\"BUY\", data => this.setState({ response1: data }));\n    socket.on(\"BUY\", this.saveNewBuyValues);\n\n    socket.on(\"SELL\", data => this.setState({ response2: data }));\n    socket.on(\"SELL\", this.saveNewSellValues);\n\n    //socket.emit(\"EXCHANGES\", this.saveNewExchangeValues);\n    //socket.on(\"EXCHANGES\", data => this.setState({ response3: data }));\n    //socket.on(\"EXCHANGES\", this.saveNewExchangeValues);\n\n    socket.emit(\"STOCKS\", (data) => {});\n    socket.on(\"STOCKS\", (data) => {console.log(data);})\n    socket.on(\"STOCKS\", data => this.setState({ response4: data }));\n  }\n\n  saveNewStockValues = (event) => {\n    this.props.hideSpinner();\n    let result = this.state.response;\n    let [up_values_count, down_values_count] = [0, 0];\n\n    // time stored in histories should be consisitent across stocks(better for graphs)\n    let new_stocks = this.state.stocks\n\n    if(this.state.stocks[result.ticker])\n    {\n      new_stocks[result.ticker].current_value > Number(result.value) ? up_values_count++ : down_values_count++;\n      new_stocks[result.ticker].change = ((Number(result.value) - new_stocks[result.ticker].current_value) / new_stocks[result.ticker].current_value ) * 100\n      new_stocks[result.ticker].current_value = Number(result.value)\n      new_stocks[result.ticker].history.push({time: result.time, value: Number(result.value)})\n\n      if(new_stocks[result.ticker].min > Number(result.value) || new_stocks[result.ticker].min == null)\n      {\n        new_stocks[result.ticker].min = Number(result.value)\n      }\n      if(new_stocks[result.ticker].max < Number(result.value))\n      {\n        new_stocks[result.ticker].max = Number(result.value)\n      }\n    }\n    else\n    {\n      new_stocks[result.ticker] = { current_value: result.value, volumen_buy:0, volumen_sell:0, history: [{time: result.time, value: Number(result.value)}], min: Number(result.value), max: Number(result.value), change: 0,is_selected: false }\n    }\n    this.setState({stocks: new_stocks, market_trend: this.newMarketTrend(up_values_count, down_values_count)})\n  }\n\n\n  saveNewBuyValues = (event) => {\n    this.props.hideSpinner();\n    let result = this.state.response1;\n\n    let new_stocks = this.state.stocks\n    if(this.state.stocks[result.ticker])\n    {\n      new_stocks[result.ticker].volumen_buy += result.volume;\n    }\n    this.setState({stocks: new_stocks})\n\n  }\n\n  saveNewSellValues = (event) => {\n    this.props.hideSpinner();\n    let result = this.state.response2;\n\n    let new_stocks = this.state.stocks\n    if(this.state.stocks[result.ticker])\n    {\n      new_stocks[result.ticker].volumen_sell += result.volume;\n    }\n    this.setState({stocks: new_stocks})\n\n  }\n\n  saveNewExchangeValues = (event) => {\n    this.props.hideSpinner();\n    let result = this.state.response3;\n\n    // time stored in histories should be consisitent across stocks(better for graphs)\n    let new_exchange = this.state.exchanges\n\n    result.map((exchange) =>\n    {\n      if(this.state.exchange[exchange.key()])\n      {\n        new_exchange[exchange.key()].name = result.name;\n        new_exchange[exchange.key()].listed_companies = result.listed_companies\n      }\n      else\n      {\n        new_exchange[exchange.key()] = { name: result.name, listed_companies: result.listed_companies}\n      }\n    });\n    this.setState({exchanges: new_exchange})\n  }\n\n\n  saveAllStockValues(){\n    this.props.hideSpinner();\n    let result = this.state.response4;\n    console.log(result);\n    let new_stocks = this.state.stocks\n    result.map((stock) =>\n    {\n      new_stocks[stock.ticker] = { company_name: stock.company_name, quote_base: stock.quote_base, current_value:  0, volumen_buy:0, volumen_sell:0, history: [], min: null, max: null, change: 0,is_selected: false }\n    });\n    this.setState({stocks: new_stocks})\n  }\n\n  newMarketTrend = (up_count, down_count) => {\n    if(up_count === down_count) return undefined;\n    return up_count > down_count ? 'up' : 'down'\n  }\n\n  toggleStockSelection = (stock_name) => {\n    let new_stocks = this.state.stocks;\n    new_stocks[stock_name].is_selected = !new_stocks[stock_name].is_selected\n    this.setState({ stocks: new_stocks })\n  }\n\n  resetData = () => {\n    let new_stocks = this.state.stocks;\n    Object.keys(this.state.stocks).map((stock_name, index) =>\n    {\n      new_stocks[stock_name].history = [new_stocks[stock_name].history.pop()];\n      new_stocks[stock_name].min = null;\n      new_stocks[stock_name].max = null;\n    });\n    this.setState({ stocks: new_stocks });\n  }\n\n  areStocksLoaded = () => {\n    return Object.keys(this.state.stocks).length > 0;\n  }\n\n  render() {\n    return (\n      <div className='container'>\n      <button onClick={() => this.saveAllStocksValues() }>Cargar STOCKS</button>\n        <div className='columns'>\n          <StocksList\n            stocks={this.state.stocks}\n            toggleStockSelection={this.toggleStockSelection}\n            resetData={this.resetData}\n            market_trend={this.state.market_trend}\n            areStocksLoaded={this.areStocksLoaded}\n          />\n          <ExchangeList\n            exchanges={this.state.exchanges}\n          />\n          <StocksGraph stocks={this.state.stocks} />\n        </div>\n        <div className={ this.props.showSpinner ? 'modal is-active' : 'modal' }>\n          <div className=\"modal-background\"></div>\n          <div className=\"modal-content\">\n            <StocksLoaderStatus connectionError={this.state.connectionError} />\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default Dashboard;\n"]},"metadata":{},"sourceType":"module"}