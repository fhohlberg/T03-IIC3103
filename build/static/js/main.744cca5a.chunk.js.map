{"version":3,"sources":["components/StockRow.jsx","components/MarketTrendArrow.jsx","components/StocksList.jsx","components/ExchangeRow.jsx","components/ExchangeList.jsx","chartConfig.js","components/StocksGraph.jsx","components/StocksLoaderStatus.jsx","components/Dashboard.jsx","components/UnsafeScriptsWarning.jsx","App.js","index.js"],"names":["StockRow","getStockValueColor","stock","current_value","history","slice","value","this","props","stock_data","react_default","a","createElement","className","is_selected","id","stock_name","onClick","toggleStockSelection","bind","toUpperCase","volumen_buy","volumen_sell","min","max","toFixed","change","build","data","map","color","lib_default","date","time","React","Component","MarketTrendArrow","getArrow","_this","current_trend","title","StocksList","dist","render","_ref","online","areStocksLoaded","components_MarketTrendArrow","market_trend","Object","keys","stocks","index","current_stock","components_StockRow","key","colSpan","ExchangeRow","exchange_name","exchange_data","listed_companies","length","participacion","ExchangeList","exchanges","current_exchange","components_ExchangeRow","chartJsConfig","responsive","scales","xAxes","type","distribution","ticks","source","displayFormats","second","unit","scaleLabel","display","labelString","yAxes","beginAtZero","stepValue","steps","pan","enabled","mode","zoom","drag","chartColors","chartDataset","stock_values","label","fill","lineTension","backgroundColor","borderColor","borderCapStyle","borderJoinStyle","pointBorderColor","pointBackgroundColor","pointBorderWidth","pointHoverRadius","pointHoverBackgroundColor","pointHoverBorderColor","pointHoverBorderWidth","pointRadius","pointHitRadius","StocksGraph","updateChart","chart","refs","chartInstance","datasets","update","chart_dataset","find","dataset","getStockValues","concat","splice","indexOf","componentDidUpdate","t","Date","y","resetZoom","es","options","ref","StocksLoaderStatus","connectionError","Dashboard","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","saveNewStockValues","event","hideSpinner","result","up_values_count","down_values_count","new_stocks","state","ticker","Number","push","setState","newMarketTrend","saveNewBuyValues","new_exchange","volume","all_stocks","company_name","saveNewExchangeVolume","saveNewSellValues","volumen_total","hasOwnProperty","saveNewExchangeValues","name","saveAllStockValues","quote_base","up_count","down_count","undefined","isToggleOn","_this2","socket","socketIOClient","path","emit","on","components_ExchangeList","components_StocksList","resetData","components_StocksGraph","showSpinner","components_StocksLoaderStatus","UnsafeScriptsWarning","App","hasError","handleClick","assertThisInitialized","error","info","console","log","components_UnsafeScriptsWarning","style","textAlign","components_Dashboard","ReactDOM","src_App_0","document","getElementById"],"mappings":"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","file":"static/js/main.744cca5a.chunk.js","sourcesContent":["import React from 'react'\nimport { Sparklines, SparklinesLine } from 'react-sparklines';\nimport TimeAgo from 'react-timeago'\n\nclass StockRow extends React.Component {\n\n  getStockValueColor = (stock) =>{\n    if(stock.current_value < stock.history.slice(-2)[0].value){\n      return 'red';\n    }\n    else if(stock.current_value > stock.history.slice(-2)[0].value){\n      return 'green';\n    }\n    else{\n      return null;\n    }\n  }\n\n  render() {\n    let history = this.props.stock_data.history;\n    return (\n      <tr className={ this.props.stock_data.is_selected ? 'selected' : null } id={this.props.stock_name} onClick={this.props.toggleStockSelection.bind(this, this.props.stock_name)} >\n        <td>{this.props.stock_name.toUpperCase()}</td>\n        <td>\n          {this.props.stock_data.volumen_buy + this.props.stock_data.volumen_sell}\n        </td>\n        <td>\n          {this.props.stock_data.min}\n        </td>\n        <td>\n          {this.props.stock_data.max}\n        </td>\n        <td className={this.getStockValueColor(this.props.stock_data)}>\n          {this.props.stock_data.current_value.toFixed(2)}\n        </td>\n        <td className={this.getStockValueColor(this.props.stock_data)}>\n          {this.props.stock_data.change.toFixed(2)}\n        </td>\n\n        <td>\n          <Sparklines data={history.map((history) => { return history.value})}>\n            <SparklinesLine color=\"blue\" />\n          </Sparklines>\n        </td>\n        <td className='updated_at'>\n          <TimeAgo date={ history.slice(-1)[0].time } />\n        </td>\n      </tr>\n    );\n  }\n}\n\nexport default StockRow;\n","import React from 'react'\n\nclass MarketTrendArrow extends React.Component {\n\n  getArrow = () => {\n    if(this.props.current_trend === 'up'){\n      return <span className='up-arrow'>&#8679;</span>\n    }\n    else if(this.props.current_trend === 'down'){\n      return <span className='down-arrow'>&#8681;</span>\n    }\n    else{\n      return '-';\n    }\n  }\n\n  render() {\n    return (\n      <span title='Market trend' className={\"icon market-trend\"}>\n        {this.getArrow()}\n      </span>\n    );\n  }\n}\n\nexport default MarketTrendArrow;","import React from 'react'\nimport { Detector } from \"react-detect-offline\";\nimport StockRow from './StockRow.jsx'\nimport MarketTrendArrow from './MarketTrendArrow.jsx'\n\nconst StocksList = (props) => {\n  return (\n    <div className='card column' id='stocks_list'>\n      <div className='card-header'>\n        <div className='card-header-title'>\n          Stocks\n          &nbsp;\n          <Detector\n            render={({ online }) => (\n              <span className={online ? \"tag is-success\" : \"tag is-danger\"}>\n                {online ? \"Live\" : \"Offline\"}\n              </span>\n            )}\n          />\n          &nbsp;\n        </div>\n      </div>\n      <div className='card-content'>\n        { props.areStocksLoaded() ? <p className='is-size-7 has-text-info'>Seleccione una o varios stocks para mostrar.</p> : null }\n        <br></br>\n        <table className='table is-bordered'>\n          <thead>\n            <tr>\n              <th>Thicker</th>\n              <th>Volumen</th>\n              <th>Bajo Histórico</th>\n              <th>Alto Histórico</th>\n              <th>\n                Último Valor\n                <MarketTrendArrow current_trend={props.market_trend} />\n              </th>\n              <th>% Variación</th>\n              <th>Historial</th>\n              <th>Tiempo</th>\n            </tr>\n          </thead>\n          <tbody>\n            {Object.keys(props.stocks).map((stock_name, index) =>\n              {\n                let current_stock = props.stocks[stock_name];\n                return (\n                  <StockRow\n                    key={index} stock_name={stock_name}\n                    stock_data={current_stock}\n                    toggleStockSelection={props.toggleStockSelection}\n                  />\n                )\n              }\n            )}\n            { props.areStocksLoaded() ? null : <tr><td colSpan='4'>No hay stocks todavía!</td></tr> }\n          </tbody>\n        </table>\n       </div>\n    </div>\n  );\n}\n\nexport default StocksList;\n","import React from 'react'\n\nclass ExchangeRow extends React.Component {\n\n  render() {\n    return (\n      <tr >\n        <td>{this.props.exchange_name.toUpperCase()}</td>\n        <td>\n          {this.props.exchange_data.volumen_buy}\n        </td>\n        <td>\n          {this.props.exchange_data.volumen_sell}\n        </td>\n        <td>\n          {this.props.exchange_data.volumen_sell + this.props.exchange_data.volumen_buy}\n        </td>\n        <td >\n          {this.props.exchange_data.listed_companies.length}\n        </td>\n        <td >\n          {this.props.exchange_data.participacion.toFixed(2)}\n        </td>\n      </tr>\n    );\n  }\n}\n\nexport default ExchangeRow;\n","import React from 'react'\nimport { Detector } from \"react-detect-offline\";\nimport ExchangeRow from './ExchangeRow.jsx'\n\nconst ExchangeList = (props) => {\n  return (\n    <div className='card column' id='exchange_list'>\n      <div className='card-header'>\n        <div className='card-header-title'>\n          Exchanges\n          &nbsp;\n          <Detector\n            render={({ online }) => (\n              <span className={online ? \"tag is-success\" : \"tag is-danger\"}>\n                {online ? \"Live\" : \"Offline\"}\n              </span>\n            )}\n          />\n          &nbsp;\n        </div>\n      </div>\n      <div className='card-content'>\n        <table className='table is-bordered'>\n          <thead>\n            <tr>\n              <th>Thicker</th>\n              <th>Volumen Compra</th>\n              <th>Volumen Venta</th>\n              <th>Volumen Total</th>\n              <th>Cantidad Acciones</th>\n              <th>Participación mercado</th>\n            </tr>\n          </thead>\n          <tbody>\n            {Object.keys(props.exchanges).map((exchange_name, index) =>\n              {\n                let current_exchange = props.exchanges[exchange_name];\n                return (\n                  <ExchangeRow\n                    key={index} exchange_name={exchange_name}\n                    exchange_data={current_exchange}\n                  />\n                )\n              }\n            )}\n          </tbody>\n        </table>\n       </div>\n    </div>\n  );\n}\n\nexport default ExchangeList;\n","// configurations required for ChartJs\n\nexport const chartJsConfig = {\n  responsive: true,\n  scales: {\n    xAxes: [{\n      type: 'time',\n      distribution: 'linear',\n      ticks: {\n        source: 'auto'\n      },\n      time: {\n        displayFormats: {second: 'h:mm:ss a'},\n        unit: 'second'\n      },\n      scaleLabel: {\n        display: true,\n        labelString: 'Tiempo'\n      }\n    }],\n    yAxes: [{\n      ticks: {\n        beginAtZero: true,\n        stepValue: 10,\n        steps: 10\n      },\n      scaleLabel: {\n        display: true,\n        labelString: 'Precio (USD$)'\n      }\n    }]\n  },\n  pan: {\n    enabled: true,\n    mode: 'x'\n  },\n  zoom: {\n    enabled: true,\n    drag: false,\n    mode: 'x'\n  }\n};\n\n// keep enough colors (should be as many as the number of stocks recieved)\n// adding these manually to make sure the colors actually look good\nexport const chartColors = [\"rgb(244, 67, 54)\", \"rgb(76, 175, 80)\", \"rgb(63, 81, 181)\", \"rgb(255, 152, 0)\", \"rgb(33, 150, 243)\", \"rgb(139, 195, 74)\", \"rgb(255, 87, 34)\", \"rgb(121, 85, 72)\", \"rgb(233, 30, 99)\", \"rgb(205, 220, 57)\", \"rgb(156, 39, 176)\", \"rgb(255, 235, 59)\", \"rgb(158, 158, 158)\", \"rgb(103, 58, 183)\", \"rgb(0, 150, 136)\", \"rgb(255, 193, 7)\", \"rgb(96, 125, 139)\", \"rgb(33, 33, 33)\", \"rgb(169, 4, 4)\", \"rgb(1, 74, 64)\", \"rgb(179, 3, 72)\", \"rgb(84, 58, 68)\"];\n\nexport const chartDataset = (stock_name, color, stock_values) => {\n  return {\n    label: stock_name.toUpperCase(),\n    fill: false,\n    lineTension: 0,\n    backgroundColor: color,\n    borderColor: color,\n    borderCapStyle: 'butt',\n    borderJoinStyle: 'miter',\n    pointBorderColor: color,\n    pointBackgroundColor: '#fff',\n    pointBorderWidth: 1,\n    pointHoverRadius: 5,\n    pointHoverBackgroundColor: color,\n    pointHoverBorderColor: color,\n    pointHoverBorderWidth: 2,\n    pointRadius: 3,\n    pointHitRadius: 10,\n    data: stock_values\n  };\n};\n","import React from 'react'\nimport {Line} from 'react-chartjs-2';\nimport { chartJsConfig, chartColors, chartDataset } from '../chartConfig.js'\n\nclass StocksGraph extends React.Component {\n\n  // too big a function?\n  updateChart = () => {\n    let chart = this.refs.chart.chartInstance;\n\n    if(Object.keys(this.props.stocks).length === 0)\n    {\n      chart.data.datasets = [];\n      return chart.update();\n    }\n\n    Object.keys(this.props.stocks).map((stock_name, index) =>\n    {\n      let current_stock = this.props.stocks[stock_name];\n      let chart_dataset = chart.data.datasets.find((dataset) => {\n        return dataset.label === stock_name.toUpperCase()\n      });\n\n      if(current_stock.is_selected)\n      {\n        let current_stock = this.props.stocks[stock_name];\n        if(chart_dataset)\n        {\n          // only update the data, don't create a new dataset for the graph\n          chart_dataset.data = this.getStockValues(current_stock);\n        }\n        else\n        {\n          // create a new dataset for graph\n          if(current_stock)\n          {\n            chart.data.datasets = chart.data.datasets.concat(\n              [\n                chartDataset(stock_name, chartColors[index], this.getStockValues(current_stock))\n              ]\n            )\n          }\n        }\n      }\n      else\n      {\n        if(chart_dataset)\n        {\n          // remove the dataset from graph\n          chart.data.datasets.splice(chart.data.datasets.indexOf(chart_dataset), 1);\n        }\n      }\n      chart.update();\n    })\n  }\n\n  componentDidUpdate = () => {\n    this.updateChart();\n  }\n\n  // returns an array of objects, {t: timestamp, y: value}\n  getStockValues = (stock) =>{\n    return stock.history.map((history) => {\n      return {t: new Date(history.time), y: history.value};\n    })\n  }\n\n  resetZoom = () => {\n    this.refs.chart.chartInstance.resetZoom();\n  }\n\n  render() {\n    return (\n      <div className={'card column'} >\n        <div className='card-header'>\n          <div className='card-header-title'>\n            Gráfico Precio vs. Tiempo\n          </div>\n        </div>\n        <div className='card-content'>\n          <p className='is-size-7 has-text-info'>\n            {\n              this.refs.chart &&\n              this.refs.chart.chartInstance.data.datasets.length > 0 ? '' : 'Seleccione alguna stock para mostrar en el gráfico.'\n            }\n            <br></br>\n          </p>\n          <button className=\"button is-small is-pulled-right\" onClick={this.resetZoom}>Resetear Zoom</button>\n          <Line\n            data={{datasets: []}}\n            options={chartJsConfig}\n            ref='chart'\n          />\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default StocksGraph;\n","import React from 'react'\n\nconst StocksLoaderStatus = props => {\n  if(props.connectionError) {\n    return (\n      <div className='is-medium'>\n        <span className='has-text-danger' >No se han recibido datos. </span>\n        <br />(Vuelva después? :-))\n      </div>\n    );\n  } else {\n    return (\n      <div className='tag is-large is-success'>\n        <span className='loader'> &nbsp;</span>\n        &nbsp; &nbsp; Cargando stocks..\n      </div>\n    );\n  }\n}\n\nexport default StocksLoaderStatus;\n","import React from 'react'\nimport * as bulma from \"reactbulma\";\nimport StocksList from \"./StocksList.jsx\";\nimport ExchangeList from \"./ExchangeList.jsx\";\nimport StocksGraph from \"./StocksGraph.jsx\";\nimport StocksLoaderStatus from \"./StocksLoaderStatus.jsx\";\nimport socketIOClient from \"socket.io-client\";\n\nconst stocksUrl = 'wss://le-18262636.bitzonte.com';\n\nclass Dashboard extends React.Component {\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      all_stocks:{},\n      stocks: {},\n      exchanges: {},\n      market_trend: undefined, // 'up' or 'down'\n      connectionError: false,\n      isToggleOn: true};\n\n  }\n\n  componentDidMount(){\n    this.props.hideSpinner();\n    const socket = socketIOClient(stocksUrl, {path: \"/stocks\"});\n\n    socket.emit(\"STOCKS\", (data) => {});\n    socket.on(\"STOCKS\", (data) => {\n      this.saveAllStockValues(data);\n    });\n    //socket.on(\"STOCKS\", (data) => {console.log(data);})\n\n    socket.on(\"UPDATE\", data => this.saveNewStockValues(data));\n\n    socket.on(\"BUY\", data => this.saveNewBuyValues(data));\n\n    socket.on(\"SELL\", data => this.saveNewSellValues(data));\n\n    socket.emit(\"EXCHANGES\", (data) => {});\n    socket.on(\"EXCHANGES\", (data) => {\n      this.saveNewExchangeValues(data)\n    });\n  }\n\n  saveNewStockValues = (event) => {\n    this.props.hideSpinner();\n    let result = event;\n    let [up_values_count, down_values_count] = [0, 0];\n\n    // time stored in histories should be consisitent across stocks(better for graphs)\n    let new_stocks = this.state.stocks\n\n    if(this.state.stocks[result.ticker])\n    {\n      new_stocks[result.ticker].current_value > Number(result.value) ? up_values_count++ : down_values_count++;\n      new_stocks[result.ticker].change = ((Number(result.value) - new_stocks[result.ticker].current_value) / new_stocks[result.ticker].current_value ) * 100\n      new_stocks[result.ticker].current_value = Number(result.value)\n      new_stocks[result.ticker].history.push({time: result.time, value: Number(result.value)})\n\n      if(new_stocks[result.ticker].min > Number(result.value) || new_stocks[result.ticker].min == null)\n      {\n        new_stocks[result.ticker].min = Number(result.value)\n      }\n      if(new_stocks[result.ticker].max < Number(result.value))\n      {\n        new_stocks[result.ticker].max = Number(result.value)\n      }\n    }\n    else\n    {\n      new_stocks[result.ticker] = { current_value: result.value, volumen_buy:0, volumen_sell:0, history: [{time: result.time, value: Number(result.value)}], min: Number(result.value), max: Number(result.value), change: 0,is_selected: false }\n    }\n    this.setState({stocks: new_stocks, market_trend: this.newMarketTrend(up_values_count, down_values_count)})\n  }\n\n\n  saveNewBuyValues = (event) => {\n    this.props.hideSpinner();\n    let result = event;\n\n    let new_stocks = this.state.stocks\n    let new_exchange = this.state.exchanges\n    if(this.state.stocks[result.ticker])\n    {\n      new_stocks[result.ticker].volumen_buy += result.volume;\n\n      for (var key in this.state.exchanges) {\n        if(this.state.exchanges[key].listed_companies.indexOf(this.state.all_stocks[result.ticker].company_name) > -1 ){\n          new_exchange[key].volumen_buy += result.volume\n        }\n      }\n    }\n    this.setState({stocks: new_stocks, exchanges: new_exchange})\n    this.saveNewExchangeVolume();\n  }\n\n  saveNewSellValues = (event) => {\n    this.props.hideSpinner();\n    let result = event;\n\n    let new_stocks = this.state.stocks\n    let new_exchange = this.state.exchanges\n    if(this.state.stocks[result.ticker])\n    {\n      new_stocks[result.ticker].volumen_sell += result.volume;\n\n      for (var key in this.state.exchanges) {\n        if(this.state.exchanges[key].listed_companies.indexOf(this.state.all_stocks[result.ticker].company_name) > -1 ){\n          new_exchange[key].volumen_sell += result.volume\n        }\n      }\n    }\n    this.setState({stocks: new_stocks, exchanges: new_exchange})\n    this.saveNewExchangeVolume();\n  }\n\n  saveNewExchangeVolume = () => {\n    let new_exchange = this.state.exchanges\n    let volumen_total = 0;\n\n    for (var key in this.state.exchanges) {\n      if (new_exchange.hasOwnProperty(key)) {\n        volumen_total += new_exchange[key].volumen_sell +  new_exchange[key].volumen_buy;\n      }\n    }\n\n    for (var key in this.state.exchanges) {\n      if (new_exchange.hasOwnProperty(key)) {\n        new_exchange[key].participacion = ((new_exchange[key].volumen_sell +  new_exchange[key].volumen_buy)  / volumen_total) * 100;\n        //console.log(new_exchange[key].participacion);\n      }\n    }\n    this.setState({exchanges: new_exchange})\n  }\n\n  saveNewExchangeValues = (event) => {\n    let result = event;\n    //console.log(result);\n\n    let new_exchange = this.state.exchanges\n\n    for (var key in result) {\n      if (new_exchange.hasOwnProperty(key)) {\n        //console.log(new_exchange[key].participacion);\n      }\n      else\n      {\n        new_exchange[key] = { name: result[key].name, listed_companies: result[key].listed_companies, volumen_sell: 0, volumen_buy: 0, participacion: 0}\n        //console.log(new_exchange[key]);\n      }\n    }\n\n    this.setState({exchanges: new_exchange})\n  }\n\n\n  saveAllStockValues = (event) => {\n    let result = event;\n\n    //console.log(result);\n    let new_stocks = this.state.all_stocks\n    result.map((stock) =>\n    {\n      new_stocks[stock.ticker] = {company_name: stock.company_name, quote_base: stock.quote_base}\n    });\n    this.setState({all_stocks: new_stocks})\n  }\n\n  newMarketTrend = (up_count, down_count) => {\n    if(up_count === down_count) return undefined;\n    return up_count > down_count ? 'up' : 'down'\n  }\n\n  toggleStockSelection = (stock_name) => {\n    let new_stocks = this.state.stocks;\n    new_stocks[stock_name].is_selected = !new_stocks[stock_name].is_selected\n    this.setState({ stocks: new_stocks })\n  }\n\n\n  areStocksLoaded = () => {\n    return Object.keys(this.state.stocks).length > 0;\n  }\n\n  render() {\n    return (\n      <div className='container'>\n      <br></br>\n        <div className='rows'>\n            <ExchangeList\n              exchanges={this.state.exchanges}\n            />\n            <br></br>\n            <StocksList\n              stocks={this.state.stocks}\n              toggleStockSelection={this.toggleStockSelection}\n              resetData={this.resetData}\n              market_trend={this.state.market_trend}\n              areStocksLoaded={this.areStocksLoaded}\n            />\n            <br></br>\n            <StocksGraph stocks={this.state.stocks} />\n          </div>\n          <div className={ this.props.showSpinner ? 'modal is-active' : 'modal' }>\n            <div className=\"modal-background\"></div>\n            <div className=\"modal-content\">\n              <StocksLoaderStatus connectionError={this.state.connectionError} />\n            </div>\n          </div>\n        </div>\n    );\n  }\n}\n\nexport default Dashboard;\n","import React from 'react'\n\nconst UnsafeScriptsWarning = props => {\n  return (\n    <div className='container stocks-loader'>\n      <div className='card-header'>\n        <div className='card-header-icon'>\n          <span className='loader'></span>\n        </div>\n        <div className='card-header-title'>\n          Loading...\n        </div>\n      </div>\n      <div className='card'>\n        <div className='card-content'>\n          Debes hacer click en &nbsp;<code>\"Load Unsafe Scripts\"</code>&nbsp; para proceder.\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default UnsafeScriptsWarning;\n","import React, { Component } from 'react';\nimport './App.css';\nimport Dashboard from './components/Dashboard.jsx'\nimport UnsafeScriptsWarning from \"./components/UnsafeScriptsWarning\";\n\nclass App extends Component {\n\n  constructor(){\n  super();\n  this.handleClick = this.handleClick.bind(this);\n  }\n\n  state = {\n    hasError: false,\n    showSpinner: true\n  }\n\n  static getDerivedStateFromError(error) {\n    console.log('Ocurrió algún error');\n    return { hasError: true };\n  }\n\n  componentDidCatch(error, info) {\n    console.log(error, info);\n  }\n\n  hideSpinner = () => {\n    this.setState({showSpinner: false});\n  }\n\n  handleClick() {\n  this.setState(state => ({\n    isToggleOn: !state.isToggleOn\n    }));\n  }\n\n  render() {\n    if (this.state.hasError) {\n      return <UnsafeScriptsWarning />;\n    }\n    if(!this.state.isToggleOn){\n      return (\n        <div className='container' style={{ textAlign: \"center\" }}>\n        <br></br>\n          <button onClick={this.handleClick}>\n            {this.state.isToggleOn ? 'CONECTAR SOCKET' : 'DESCONECTAR SOCKET'}\n          </button>\n          <Dashboard hideSpinner={this.hideSpinner} showSpinner={this.state.showSpinner} />\n        </div>\n    );\n    }else{\n      return (\n          <div className='container' style={{ textAlign: \"center\" }}>\n            <br></br>\n            <div className='container'>\n              <br></br>\n                <button onClick={this.handleClick}>\n                  {this.state.isToggleOn ? 'CONECTAR SOCKET' : 'DESCONECTAR SOCKET'}\n                </button>\n              <br></br>\n            </div>\n        </div>);\n      }\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}